// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project f667fc580d8d9346 "ApiFlow (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * link?: string // Link
}} Props

 */
import { routes } from "./chunks/chunk-6OPQGIC3.js";
import "./chunks/chunk-WSFCRVEQ.js";

// virtual:remove-button
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/qPmAxYl9w3ip7Mb7ykUn/wMawL7Qx1Xs30nz6vw16/la1trdZ8I.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	Link,
	RichText,
	SVG,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var serializationHash = "framer-x5hxb";
var variantClassNames = {
	H4nYYUuvT: "framer-v-1op36gg",
};
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var getProps = ({ height, id, link, width, ...props }) => {
	return {
		...props,
		GlApASFCK: link !== null && link !== void 0 ? link : props.GlApASFCK,
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const { style, className, layoutId, variant, GlApASFCK, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "H4nYYUuvT",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<Link href={GlApASFCK} nodeId={"H4nYYUuvT"} openInNewTab={true}>
						<motion.a
							{...restProps}
							{...gestureHandlers}
							className={`${cx(serializationHash, ...sharedStyleClassNames, "framer-1op36gg", className, classNames)} framer-o8af5c`}
							data-border={true}
							data-framer-name={"Variant 1"}
							data-reset={"button"}
							layoutDependency={layoutDependency}
							layoutId={"H4nYYUuvT"}
							ref={ref !== null && ref !== void 0 ? ref : ref1}
							style={{
								"--border-bottom-width": "1px",
								"--border-color": "rgb(232, 232, 232)",
								"--border-left-width": "1px",
								"--border-right-width": "1px",
								"--border-style": "solid",
								"--border-top-width": "1px",
								backgroundColor:
									"var(--token-36bb1a2d-632b-41b6-8e08-ee48dcf29873, rgb(16, 16, 16))",
								borderBottomLeftRadius: 10,
								borderBottomRightRadius: 10,
								borderTopLeftRadius: 10,
								borderTopRightRadius: 10,
								boxShadow:
									"0px 0.6021873017743928px 0.421531111242075px -1px rgba(0, 0, 0, 0.11759), 0px 2.288533303243457px 1.60197331227042px -2px rgba(0, 0, 0, 0.11085), 0px 10px 7px -3px rgba(0, 0, 0, 0.08)",
								...style,
							}}
						>
							<SVG
								className={"framer-1508vfs"}
								data-framer-name={"bag"}
								fill={
									"var(--token-f1edbbf0-4dde-4043-88fc-e447b2e4f208, rgb(255, 255, 255))"
								}
								intrinsicHeight={512}
								intrinsicWidth={512}
								layoutDependency={layoutDependency}
								layoutId={"YaQPRJ5rT"}
								svg={
									'<svg xmlns="http://www.w3.org/2000/svg" class="ionicon" viewBox="0 0 512 512"><path d="M454.65 169.4A31.82 31.82 0 0 0 432 160h-64v-16a112 112 0 0 0-224 0v16H80a32 32 0 0 0-32 32v216c0 39 33 72 72 72h272a72.22 72.22 0 0 0 50.48-20.55 69.48 69.48 0 0 0 21.52-50.2V192a31.75 31.75 0 0 0-9.35-22.6zM176 144a80 80 0 0 1 160 0v16H176z"/></svg>'
								}
								withExternalLayout={true}
							/>
							<RichText
								__fromCanvasComponent={true}
								className={"framer-177121f"}
								fonts={["GF;DM Sans-700"]}
								layoutDependency={layoutDependency}
								layoutId={"xRh2ZBpJM"}
								style={{
									"--extracted-r6o4lv":
										"var(--token-f1edbbf0-4dde-4043-88fc-e447b2e4f208, rgb(255, 255, 255))",
									"--framer-paragraph-spacing": "0px",
								}}
								verticalAlignment={"top"}
								withExternalLayout={true}
							>
								<React.Fragment>
									<motion.p
										style={{
											"--font-selector": "R0Y7RE0gU2Fucy03MDA=",
											"--framer-font-family":
												'"DM Sans", "DM Sans Placeholder", sans-serif',
											"--framer-font-size": "14px",
											"--framer-font-weight": "700",
											"--framer-letter-spacing": "-0.04em",
											"--framer-text-color":
												"var(--extracted-r6o4lv, var(--token-f1edbbf0-4dde-4043-88fc-e447b2e4f208, rgb(255, 255, 255)))",
										}}
									>
										{"Sign Up With Google"}
									</motion.p>
								</React.Fragment>
							</RichText>
						</motion.a>
					</Link>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-x5hxb.framer-o8af5c, .framer-x5hxb .framer-o8af5c { display: block; }",
	".framer-x5hxb.framer-1op36gg { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 8px; height: 38px; justify-content: flex-start; padding: 8px 12px 8px 14px; position: relative; text-decoration: none; width: 144px; }",
	".framer-x5hxb .framer-1508vfs { aspect-ratio: 1 / 1; flex: none; height: var(--framer-aspect-ratio-supported, 16px); position: relative; width: 16px; }",
	".framer-x5hxb .framer-177121f { flex: 1 0 0px; height: auto; overflow: hidden; position: relative; white-space: pre-wrap; width: 1px; word-break: break-word; word-wrap: break-word; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-x5hxb.framer-1op36gg { gap: 0px; } .framer-x5hxb.framer-1op36gg > * { margin: 0px; margin-left: calc(8px / 2); margin-right: calc(8px / 2); } .framer-x5hxb.framer-1op36gg > :first-child { margin-left: 0px; } .framer-x5hxb.framer-1op36gg > :last-child { margin-right: 0px; } }",
	'.framer-x5hxb[data-border="true"]::after, .framer-x5hxb [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var Framerla1trdZ8I = withCSS(Component, css, "framer-x5hxb");
var stdin_default = Framerla1trdZ8I;
Framerla1trdZ8I.displayName = "Remove Button";
Framerla1trdZ8I.defaultProps = {
	height: 38,
	width: 144,
};
addPropertyControls(Framerla1trdZ8I, {
	GlApASFCK: {
		title: "Link",
		type: ControlType.Link,
	},
});
addFonts(
	Framerla1trdZ8I,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "DM Sans",
					source: "google",
					style: "normal",
					url: "https://fonts.gstatic.com/s/dmsans/v15/rP2tp2ywxg089UriI5-g4vlH9VoD8CmcqZG40F9JadbnoEwARZthS2f3ZGMZpg.woff2",
					weight: "700",
				},
			],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:remove-button
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"f667fc580d8d9346cf49d633d75940b95292fa43c24dd7765c9a175ec73f7405"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders RemoveButtonFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"f667fc580d8d9346cf49d633d75940b95292fa43c24dd7765c9a175ec73f7405"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var remove_button_default = ComponentWithRoot;
export { remove_button_default as default };
