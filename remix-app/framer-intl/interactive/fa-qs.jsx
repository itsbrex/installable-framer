// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project f667fc580d8d9346 "ApiFlow (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Homepage' | 'Pricing' | 'Sales' | 'Support' // Variant
}} Props

 */
import { stdin_default } from "../chunks/chunk-IQFP5WTW.js";
import "../chunks/chunk-DOAYAVFF.js";
import "../chunks/chunk-3IMWMF2U.js";
import { routes } from "../chunks/chunk-6OPQGIC3.js";
import "../chunks/chunk-WSFCRVEQ.js";

// virtual:interactive/fa-qs
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/6GKhy2l5gakg4Kc5NkIr/xPPEqrAYsZYr3CN7uBu0/tOUeA1GYC.js
import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ComponentViewportProvider,
	ControlType,
	cx,
	getFonts,
	PathVariablesContext,
	useComponentViewport,
	useLocaleInfo,
	useQueryData,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";

// /:https://framerusercontent.com/modules/fazkeHEM6pdbWdNiD6t1/oDxjJYtqXbLIPyiIlqvP/UAuNJVk60.js
import {
	addPropertyControls as e3,
	ControlType as t7,
	QueryEngine as l2,
} from "unframer";

// /:https://framerusercontent.com/modules/fazkeHEM6pdbWdNiD6t1/oDxjJYtqXbLIPyiIlqvP/UAuNJVk60-0.js
import { ControlType as U } from "unframer";
import { ControlType as tA } from "unframer";
var t;
var e;
var r;
var n = Object.create;
var i = Object.defineProperty;
var s = Object.getOwnPropertyDescriptor;
var a = Object.getOwnPropertyNames;
var o = Object.getPrototypeOf;
var u = Object.prototype.hasOwnProperty;
var l = (t10, e22) =>
	function () {
		return (
			e22 ||
				(0, t10[a(t10)[0]])(
					(e22 = {
						exports: {},
					}).exports,
					e22,
				),
			e22.exports
		);
	};
var f = (t10, e22, r2, n22) => {
	if ((e22 && "object" == typeof e22) || "function" == typeof e22)
		for (let o2 of a(e22))
			u.call(t10, o2) ||
				o2 === r2 ||
				i(t10, o2, {
					get: () => e22[o2],
					enumerable: !(n22 = s(e22, o2)) || n22.enumerable,
				});
	return t10;
};
var h = (t10, e22, r2) => (
	(r2 = null != t10 ? n(o(t10)) : {}),
	f(
		// If the importer is in node compatibility mode or this is not an ESM
		// file that has been converted to a CommonJS file using a Babel-
		// compatible transform (i.e. "__esModule" has not been set), then set
		// "default" to the CommonJS "module.exports" for node compatibility.
		!e22 && t10 && t10.__esModule
			? r2
			: i(r2, "default", {
					value: t10,
					enumerable: true,
				}),
		t10,
	)
);
var c = l({
	"../../../node_modules/dataloader/index.js"(t10, e22) {
		var r2,
			n22 = /* @__PURE__ */ (function () {
				function t11(t12, e4) {
					if ("function" != typeof t12)
						throw TypeError(
							"DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but got: " +
								t12 +
								".",
						);
					(this._batchLoadFn = t12),
						(this._maxBatchSize = (function (t13) {
							if (!(!t13 || false !== t13.batch)) return 1;
							var e5 = t13 && t13.maxBatchSize;
							if (void 0 === e5) return 1 / 0;
							if ("number" != typeof e5 || e5 < 1)
								throw TypeError(
									"maxBatchSize must be a positive number: " + e5,
								);
							return e5;
						})(e4)),
						(this._batchScheduleFn = (function (t13) {
							var e5 = t13 && t13.batchScheduleFn;
							if (void 0 === e5) return i2;
							if ("function" != typeof e5)
								throw TypeError("batchScheduleFn must be a function: " + e5);
							return e5;
						})(e4)),
						(this._cacheKeyFn = (function (t13) {
							var e5 = t13 && t13.cacheKeyFn;
							if (void 0 === e5)
								return function (t14) {
									return t14;
								};
							if ("function" != typeof e5)
								throw TypeError("cacheKeyFn must be a function: " + e5);
							return e5;
						})(e4)),
						(this._cacheMap = (function (t13) {
							if (!(!t13 || false !== t13.cache)) return null;
							var e5 = t13 && t13.cacheMap;
							if (void 0 === e5) return /* @__PURE__ */ new Map();
							if (null !== e5) {
								var r3 = ["get", "set", "delete", "clear"].filter(
									function (t14) {
										return e5 && "function" != typeof e5[t14];
									},
								);
								if (0 !== r3.length)
									throw TypeError(
										"Custom cacheMap missing methods: " + r3.join(", "),
									);
							}
							return e5;
						})(e4)),
						(this._batch = null),
						(this.name = e4 && e4.name ? e4.name : null);
				}
				var e32 = t11.prototype;
				return (
					(e32.load = function (t12) {
						if (null == t12)
							throw TypeError(
								"The loader.load() function must be called with a value, but got: " +
									String(t12) +
									".",
							);
						var e4 = (function (t13) {
								var e5 = t13._batch;
								if (
									null !== e5 &&
									!e5.hasDispatched &&
									e5.keys.length < t13._maxBatchSize
								)
									return e5;
								var r4 = {
									hasDispatched: false,
									keys: [],
									callbacks: [],
								};
								return (
									(t13._batch = r4),
									t13._batchScheduleFn(function () {
										(function (t14, e6) {
											var r5;
											if (((e6.hasDispatched = true), 0 === e6.keys.length)) {
												a22(e6);
												return;
											}
											try {
												r5 = t14._batchLoadFn(e6.keys);
											} catch (r6) {
												return s2(
													t14,
													e6,
													TypeError(
														"DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function errored synchronously: " +
															String(r6) +
															".",
													),
												);
											}
											if (!r5 || "function" != typeof r5.then)
												return s2(
													t14,
													e6,
													TypeError(
														"DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise: " +
															String(r5) +
															".",
													),
												);
											r5.then(function (t15) {
												if (!o2(t15))
													throw TypeError(
														"DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array: " +
															String(t15) +
															".",
													);
												if (t15.length !== e6.keys.length)
													throw TypeError(
														"DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array of the same length as the Array of keys.\n\nKeys:\n" +
															String(e6.keys) +
															"\n\nValues:\n" +
															String(t15),
													);
												a22(e6);
												for (var r6 = 0; r6 < e6.callbacks.length; r6++) {
													var n4 = t15[r6];
													n4 instanceof Error
														? e6.callbacks[r6].reject(n4)
														: e6.callbacks[r6].resolve(n4);
												}
											}).catch(function (r6) {
												s2(t14, e6, r6);
											});
										})(t13, r4);
									}),
									r4
								);
							})(this),
							r3 = this._cacheMap,
							n3 = this._cacheKeyFn(t12);
						if (r3) {
							var i3 = r3.get(n3);
							if (i3) {
								var u22 = e4.cacheHits || (e4.cacheHits = []);
								return new Promise(function (t13) {
									u22.push(function () {
										t13(i3);
									});
								});
							}
						}
						e4.keys.push(t12);
						var l22 = new Promise(function (t13, r4) {
							e4.callbacks.push({
								resolve: t13,
								reject: r4,
							});
						});
						return r3 && r3.set(n3, l22), l22;
					}),
					(e32.loadMany = function (t12) {
						if (!o2(t12))
							throw TypeError(
								"The loader.loadMany() function must be called with Array<key> but got: " +
									t12 +
									".",
							);
						for (var e4 = [], r3 = 0; r3 < t12.length; r3++)
							e4.push(
								this.load(t12[r3]).catch(function (t13) {
									return t13;
								}),
							);
						return Promise.all(e4);
					}),
					(e32.clear = function (t12) {
						var e4 = this._cacheMap;
						if (e4) {
							var r3 = this._cacheKeyFn(t12);
							e4.delete(r3);
						}
						return this;
					}),
					(e32.clearAll = function () {
						var t12 = this._cacheMap;
						return t12 && t12.clear(), this;
					}),
					(e32.prime = function (t12, e4) {
						var r3 = this._cacheMap;
						if (r3) {
							var n3,
								i3 = this._cacheKeyFn(t12);
							void 0 === r3.get(i3) &&
								(e4 instanceof Error
									? (n3 = Promise.reject(e4)).catch(function () {})
									: (n3 = Promise.resolve(e4)),
								r3.set(i3, n3));
						}
						return this;
					}),
					t11
				);
			})(),
			i2 =
				"object" == typeof process && "function" == typeof process.nextTick
					? function (t11) {
							r2 || (r2 = Promise.resolve()),
								r2.then(function () {
									process.nextTick(t11);
								});
						}
					: "function" == typeof setImmediate
						? function (t11) {
								setImmediate(t11);
							}
						: function (t11) {
								setTimeout(t11);
							};
		function s2(t11, e32, r3) {
			a22(e32);
			for (var n3 = 0; n3 < e32.keys.length; n3++)
				t11.clear(e32.keys[n3]), e32.callbacks[n3].reject(r3);
		}
		function a22(t11) {
			if (t11.cacheHits)
				for (var e32 = 0; e32 < t11.cacheHits.length; e32++)
					t11.cacheHits[e32]();
		}
		function o2(t11) {
			return (
				"object" == typeof t11 &&
				null !== t11 &&
				"number" == typeof t11.length &&
				(0 === t11.length ||
					(t11.length > 0 &&
						Object.prototype.hasOwnProperty.call(t11, t11.length - 1)))
			);
		}
		e22.exports = n22;
	},
});
var p = l({
	"../../../node_modules/splaytree/dist/splay.js"(t10, e22) {
		var r2;
		(r2 = function () {
			var t11 = function (t12, e4) {
				(this.next = null),
					(this.key = t12),
					(this.data = e4),
					(this.left = null),
					(this.right = null);
			};
			function e32(t12, e4) {
				return t12 > e4 ? 1 : t12 < e4 ? -1 : 0;
			}
			function r3(e4, r4, n3) {
				for (var i3 = new t11(null, null), s2 = i3, a22 = i3; ; ) {
					var o2 = n3(e4, r4.key);
					if (o2 < 0) {
						if (null === r4.left) break;
						if (0 > n3(e4, r4.left.key)) {
							var u22 = r4.left;
							if (
								((r4.left = u22.right),
								(u22.right = r4),
								null === (r4 = u22).left)
							)
								break;
						}
						(a22.left = r4), (a22 = r4), (r4 = r4.left);
					} else if (o2 > 0) {
						if (null === r4.right) break;
						if (n3(e4, r4.right.key) > 0) {
							var u22 = r4.right;
							if (
								((r4.right = u22.left),
								(u22.left = r4),
								null === (r4 = u22).right)
							)
								break;
						}
						(s2.right = r4), (s2 = r4), (r4 = r4.right);
					} else break;
				}
				return (
					(s2.right = r4.left),
					(a22.left = r4.right),
					(r4.left = i3.right),
					(r4.right = i3.left),
					r4
				);
			}
			function n22(e4, n3, i3, s2) {
				var a22 = new t11(e4, n3);
				if (null === i3) return (a22.left = a22.right = null), a22;
				i3 = r3(e4, i3, s2);
				var o2 = s2(e4, i3.key);
				return (
					o2 < 0
						? ((a22.left = i3.left), (a22.right = i3), (i3.left = null))
						: o2 >= 0 &&
							((a22.right = i3.right), (a22.left = i3), (i3.right = null)),
					a22
				);
			}
			function i2(t12, e4, n3) {
				var i3 = null,
					s2 = null;
				if (e4) {
					e4 = r3(t12, e4, n3);
					var a22 = n3(e4.key, t12);
					0 === a22
						? ((i3 = e4.left), (s2 = e4.right))
						: a22 < 0
							? ((s2 = e4.right), (e4.right = null), (i3 = e4))
							: ((i3 = e4.left), (e4.left = null), (s2 = e4));
				}
				return {
					left: i3,
					right: s2,
				};
			}
			return /** @class */ (function () {
				function s2(t12) {
					void 0 === t12 && (t12 = e32),
						(this._root = null),
						(this._size = 0),
						(this._comparator = t12);
				}
				return (
					(s2.prototype.insert = function (t12, e4) {
						return (
							this._size++,
							(this._root = n22(t12, e4, this._root, this._comparator))
						);
					}),
					(s2.prototype.add = function (e4, n3) {
						var i3 = new t11(e4, n3);
						null === this._root &&
							((i3.left = i3.right = null), this._size++, (this._root = i3));
						var s3 = this._comparator,
							a22 = r3(e4, this._root, s3),
							o2 = s3(e4, a22.key);
						return (
							0 === o2
								? (this._root = a22)
								: (o2 < 0
										? ((i3.left = a22.left),
											(i3.right = a22),
											(a22.left = null))
										: o2 > 0 &&
											((i3.right = a22.right),
											(i3.left = a22),
											(a22.right = null)),
									this._size++,
									(this._root = i3)),
							this._root
						);
					}),
					(s2.prototype.remove = function (t12) {
						this._root = this._remove(t12, this._root, this._comparator);
					}),
					(s2.prototype._remove = function (t12, e4, n3) {
						var i3;
						return null === e4
							? null
							: ((e4 = r3(t12, e4, n3)), 0 === n3(t12, e4.key))
								? (null === e4.left
										? (i3 = e4.right)
										: ((i3 = r3(t12, e4.left, n3)).right = e4.right),
									this._size--,
									i3)
								: e4;
					}),
					(s2.prototype.pop = function () {
						var t12 = this._root;
						if (t12) {
							for (; t12.left; ) t12 = t12.left;
							return (
								(this._root = r3(t12.key, this._root, this._comparator)),
								(this._root = this._remove(
									t12.key,
									this._root,
									this._comparator,
								)),
								{
									key: t12.key,
									data: t12.data,
								}
							);
						}
						return null;
					}),
					(s2.prototype.findStatic = function (t12) {
						for (var e4 = this._root, r4 = this._comparator; e4; ) {
							var n3 = r4(t12, e4.key);
							if (0 === n3) return e4;
							e4 = n3 < 0 ? e4.left : e4.right;
						}
						return null;
					}),
					(s2.prototype.find = function (t12) {
						return this._root &&
							((this._root = r3(t12, this._root, this._comparator)),
							0 !== this._comparator(t12, this._root.key))
							? null
							: this._root;
					}),
					(s2.prototype.contains = function (t12) {
						for (var e4 = this._root, r4 = this._comparator; e4; ) {
							var n3 = r4(t12, e4.key);
							if (0 === n3) return true;
							e4 = n3 < 0 ? e4.left : e4.right;
						}
						return false;
					}),
					(s2.prototype.forEach = function (t12, e4) {
						for (var r4 = this._root, n3 = [], i3 = false; !i3; )
							null !== r4
								? (n3.push(r4), (r4 = r4.left))
								: 0 !== n3.length
									? ((r4 = n3.pop()), t12.call(e4, r4), (r4 = r4.right))
									: (i3 = true);
						return this;
					}),
					(s2.prototype.range = function (t12, e4, r4, n3) {
						for (
							var i3 = [], s3 = this._comparator, a22 = this._root;
							0 !== i3.length || a22;
						)
							if (a22) i3.push(a22), (a22 = a22.left);
							else {
								if (s3((a22 = i3.pop()).key, e4) > 0) break;
								if (s3(a22.key, t12) >= 0 && r4.call(n3, a22)) return this;
								a22 = a22.right;
							}
						return this;
					}),
					(s2.prototype.keys = function () {
						var t12 = [];
						return (
							this.forEach(function (e4) {
								var r4 = e4.key;
								return t12.push(r4);
							}),
							t12
						);
					}),
					(s2.prototype.values = function () {
						var t12 = [];
						return (
							this.forEach(function (e4) {
								var r4 = e4.data;
								return t12.push(r4);
							}),
							t12
						);
					}),
					(s2.prototype.min = function () {
						return this._root ? this.minNode(this._root).key : null;
					}),
					(s2.prototype.max = function () {
						return this._root ? this.maxNode(this._root).key : null;
					}),
					(s2.prototype.minNode = function (t12) {
						if ((void 0 === t12 && (t12 = this._root), t12))
							for (; t12.left; ) t12 = t12.left;
						return t12;
					}),
					(s2.prototype.maxNode = function (t12) {
						if ((void 0 === t12 && (t12 = this._root), t12))
							for (; t12.right; ) t12 = t12.right;
						return t12;
					}),
					(s2.prototype.at = function (t12) {
						for (var e4 = this._root, r4 = false, n3 = 0, i3 = []; !r4; )
							if (e4) i3.push(e4), (e4 = e4.left);
							else if (i3.length > 0) {
								if (((e4 = i3.pop()), n3 === t12)) return e4;
								n3++, (e4 = e4.right);
							} else r4 = true;
						return null;
					}),
					(s2.prototype.next = function (t12) {
						var e4 = this._root,
							r4 = null;
						if (t12.right) {
							for (r4 = t12.right; r4.left; ) r4 = r4.left;
							return r4;
						}
						for (var n3 = this._comparator; e4; ) {
							var i3 = n3(t12.key, e4.key);
							if (0 === i3) break;
							i3 < 0 ? ((r4 = e4), (e4 = e4.left)) : (e4 = e4.right);
						}
						return r4;
					}),
					(s2.prototype.prev = function (t12) {
						var e4 = this._root,
							r4 = null;
						if (null !== t12.left) {
							for (r4 = t12.left; r4.right; ) r4 = r4.right;
							return r4;
						}
						for (var n3 = this._comparator; e4; ) {
							var i3 = n3(t12.key, e4.key);
							if (0 === i3) break;
							i3 < 0 ? (e4 = e4.left) : ((r4 = e4), (e4 = e4.right));
						}
						return r4;
					}),
					(s2.prototype.clear = function () {
						return (this._root = null), (this._size = 0), this;
					}),
					(s2.prototype.toList = function () {
						return (function (e4) {
							for (
								var r4 = e4,
									n3 = [],
									i3 = false,
									s3 = new t11(null, null),
									a22 = s3;
								!i3;
							)
								r4
									? (n3.push(r4), (r4 = r4.left))
									: n3.length > 0
										? (r4 = (r4 = a22 = a22.next = n3.pop()).right)
										: (i3 = true);
							return (a22.next = null), s3.next;
						})(this._root);
					}),
					(s2.prototype.load = function (e4, r4, n3) {
						void 0 === r4 && (r4 = []), void 0 === n3 && (n3 = false);
						var i3 = e4.length,
							s3 = this._comparator;
						if (
							(n3 &&
								(function t12(e5, r5, n4, i4, s4) {
									if (!(n4 >= i4)) {
										for (
											var a3 = e5[(n4 + i4) >> 1], o2 = n4 - 1, u22 = i4 + 1;
											;
										) {
											do o2++;
											while (0 > s4(e5[o2], a3));
											do u22--;
											while (s4(e5[u22], a3) > 0);
											if (o2 >= u22) break;
											var l22 = e5[o2];
											(e5[o2] = e5[u22]),
												(e5[u22] = l22),
												(l22 = r5[o2]),
												(r5[o2] = r5[u22]),
												(r5[u22] = l22);
										}
										t12(e5, r5, n4, u22, s4), t12(e5, r5, u22 + 1, i4, s4);
									}
								})(e4, r4, 0, i3 - 1, s3),
							null === this._root)
						)
							(this._root = (function e5(r5, n4, i4, s4) {
								var a3 = s4 - i4;
								if (a3 > 0) {
									var o2 = i4 + Math.floor(a3 / 2),
										u22 = r5[o2],
										l22 = n4[o2],
										f2 = new t11(u22, l22);
									return (
										(f2.left = e5(r5, n4, i4, o2)),
										(f2.right = e5(r5, n4, o2 + 1, s4)),
										f2
									);
								}
								return null;
							})(e4, r4, 0, i3)),
								(this._size = i3);
						else {
							var a22 = (function (e5, r5, n4) {
								for (
									var i4 = new t11(null, null), s4 = i4, a3 = e5, o2 = r5;
									null !== a3 && null !== o2;
								)
									0 > n4(a3.key, o2.key)
										? ((s4.next = a3), (a3 = a3.next))
										: ((s4.next = o2), (o2 = o2.next)),
										(s4 = s4.next);
								return (
									null !== a3 ? (s4.next = a3) : null !== o2 && (s4.next = o2),
									i4.next
								);
							})(
								this.toList(),
								(function (e5, r5) {
									for (
										var n4 = new t11(null, null), i4 = n4, s4 = 0;
										s4 < e5.length;
										s4++
									)
										i4 = i4.next = new t11(e5[s4], r5[s4]);
									return (i4.next = null), n4.next;
								})(e4, r4),
								s3,
							);
							(i3 = this._size + i3),
								(this._root = (function t12(e5, r5, n4) {
									var i4 = n4 - r5;
									if (i4 > 0) {
										var s4 = r5 + Math.floor(i4 / 2),
											a3 = t12(e5, r5, s4),
											o2 = e5.head;
										return (
											(o2.left = a3),
											(e5.head = e5.head.next),
											(o2.right = t12(e5, s4 + 1, n4)),
											o2
										);
									}
									return null;
								})(
									{
										head: a22,
									},
									0,
									i3,
								));
						}
						return this;
					}),
					(s2.prototype.isEmpty = function () {
						return null === this._root;
					}),
					Object.defineProperty(s2.prototype, "size", {
						get: function () {
							return this._size;
						},
						enumerable: true,
						configurable: true,
					}),
					Object.defineProperty(s2.prototype, "root", {
						get: function () {
							return this._root;
						},
						enumerable: true,
						configurable: true,
					}),
					(s2.prototype.toString = function (t12) {
						void 0 === t12 &&
							(t12 = function (t13) {
								return String(t13.key);
							});
						var e4 = [];
						return (
							(function t13(e5, r4, n3, i3, s3) {
								if (e5) {
									i3(
										"" +
											r4 +
											(n3 ? "\u2514\u2500\u2500 " : "\u251C\u2500\u2500 ") +
											s3(e5) +
											"\n",
									);
									var a22 = r4 + (n3 ? "    " : "\u2502   ");
									e5.left && t13(e5.left, a22, false, i3, s3),
										e5.right && t13(e5.right, a22, true, i3, s3);
								}
							})(
								this._root,
								"",
								true,
								function (t13) {
									return e4.push(t13);
								},
								t12,
							),
							e4.join("")
						);
					}),
					(s2.prototype.update = function (t12, e4, s3) {
						var a22,
							o2,
							u22 = this._comparator,
							l22 = i2(t12, this._root, u22),
							f2 = l22.left,
							h2 = l22.right;
						0 > u22(t12, e4)
							? (h2 = n22(e4, s3, h2, u22))
							: (f2 = n22(e4, s3, f2, u22)),
							(this._root =
								((a22 = f2),
								null === (o2 = h2)
									? a22
									: (null === a22 || ((o2 = r3(a22.key, o2, u22)).left = a22),
										o2)));
					}),
					(s2.prototype.split = function (t12) {
						return i2(t12, this._root, this._comparator);
					}),
					(s2.prototype[Symbol.iterator] = function () {
						var t12, e4, r4;
						return (function (t13, e5) {
							var r5,
								n3,
								i3,
								s3,
								a22 = {
									label: 0,
									sent: function () {
										if (1 & i3[0]) throw i3[1];
										return i3[1];
									},
									trys: [],
									ops: [],
								};
							return (
								(s3 = {
									next: o2(0),
									throw: o2(1),
									return: o2(2),
								}),
								"function" == typeof Symbol &&
									(s3[Symbol.iterator] = function () {
										return this;
									}),
								s3
							);
							function o2(s4) {
								return function (o3) {
									return (function (s5) {
										if (r5) throw TypeError("Generator is already executing.");
										for (; a22; )
											try {
												if (
													((r5 = 1),
													n3 &&
														(i3 =
															2 & s5[0]
																? n3.return
																: s5[0]
																	? n3.throw ||
																		((i3 = n3.return) && i3.call(n3), 0)
																	: n3.next) &&
														!(i3 = i3.call(n3, s5[1])).done)
												)
													return i3;
												switch (
													((n3 = 0), i3 && (s5 = [2 & s5[0], i3.value]), s5[0])
												) {
													case 0:
													case 1:
														i3 = s5;
														break;
													case 4:
														return (
															a22.label++,
															{
																value: s5[1],
																done: false,
															}
														);
													case 5:
														a22.label++, (n3 = s5[1]), (s5 = [0]);
														continue;
													case 7:
														(s5 = a22.ops.pop()), a22.trys.pop();
														continue;
													default:
														if (
															!(i3 =
																(i3 = a22.trys).length > 0 &&
																i3[i3.length - 1]) &&
															(6 === s5[0] || 2 === s5[0])
														) {
															a22 = 0;
															continue;
														}
														if (
															3 === s5[0] &&
															(!i3 || (s5[1] > i3[0] && s5[1] < i3[3]))
														) {
															a22.label = s5[1];
															break;
														}
														if (6 === s5[0] && a22.label < i3[1]) {
															(a22.label = i3[1]), (i3 = s5);
															break;
														}
														if (i3 && a22.label < i3[2]) {
															(a22.label = i3[2]), a22.ops.push(s5);
															break;
														}
														i3[2] && a22.ops.pop(), a22.trys.pop();
														continue;
												}
												s5 = e5.call(t13, a22);
											} catch (t14) {
												(s5 = [6, t14]), (n3 = 0);
											} finally {
												r5 = i3 = 0;
											}
										if (5 & s5[0]) throw s5[1];
										return {
											value: s5[0] ? s5[1] : void 0,
											done: true,
										};
									})([s4, o3]);
								};
							}
						})(this, function (n3) {
							switch (n3.label) {
								case 0:
									(t12 = this._root), (e4 = []), (r4 = false), (n3.label = 1);
								case 1:
									if (r4) return [3, 6];
									if (!(null !== t12)) return [3, 2];
									return e4.push(t12), (t12 = t12.left), [3, 5];
								case 2:
									if (!(0 !== e4.length)) return [3, 4];
									return [4, (t12 = e4.pop())];
								case 3:
									return n3.sent(), (t12 = t12.right), [3, 5];
								case 4:
									(r4 = true), (n3.label = 5);
								case 5:
									return [3, 1];
								case 6:
									return [2];
							}
						});
					}),
					s2
				);
			})();
		}),
			"object" == typeof t10 && void 0 !== e22
				? (e22.exports = r2())
				: "function" == typeof define && define.amd
					? define(r2)
					: (t10.SplayTree = r2());
	},
});
var d = l({
	"../../../node_modules/whatwg-mimetype/lib/utils.js"(t10) {
		(t10.removeLeadingAndTrailingHTTPWhitespace = (t11) =>
			t11.replace(/^[ \t\n\r]+/u, "").replace(/[ \t\n\r]+$/u, "")),
			(t10.removeTrailingHTTPWhitespace = (t11) =>
				t11.replace(/[ \t\n\r]+$/u, "")),
			(t10.isHTTPWhitespaceChar = (t11) =>
				" " === t11 || "	" === t11 || "\n" === t11 || "\r" === t11),
			(t10.solelyContainsHTTPTokenCodePoints = (t11) =>
				/^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(t11)),
			(t10.soleyContainsHTTPQuotedStringTokenCodePoints = (t11) =>
				/^[\t\u0020-\u007E\u0080-\u00FF]*$/u.test(t11)),
			(t10.asciiLowercase = (t11) =>
				t11.replace(/[A-Z]/gu, (t12) => t12.toLowerCase())),
			(t10.collectAnHTTPQuotedString = (t11, e22) => {
				let r2 = "";
				for (e22++; ; ) {
					for (; e22 < t11.length && '"' !== t11[e22] && "\\" !== t11[e22]; )
						(r2 += t11[e22]), ++e22;
					if (e22 >= t11.length) break;
					let n22 = t11[e22];
					if ((++e22, "\\" === n22)) {
						if (e22 >= t11.length) {
							r2 += "\\";
							break;
						}
						(r2 += t11[e22]), ++e22;
					} else break;
				}
				return [r2, e22];
			});
	},
});
var g = l({
	"../../../node_modules/whatwg-mimetype/lib/mime-type-parameters.js"(
		t10,
		e22,
	) {
		var {
			asciiLowercase: r2,
			solelyContainsHTTPTokenCodePoints: n22,
			soleyContainsHTTPQuotedStringTokenCodePoints: i2,
		} = d();
		e22.exports = class {
			get size() {
				return this._map.size;
			}
			get(t11) {
				return (t11 = r2(String(t11))), this._map.get(t11);
			}
			has(t11) {
				return (t11 = r2(String(t11))), this._map.has(t11);
			}
			set(t11, e32) {
				if (((t11 = r2(String(t11))), (e32 = String(e32)), !n22(t11)))
					throw Error(
						`Invalid MIME type parameter name "${t11}": only HTTP token code points are valid.`,
					);
				if (!i2(e32))
					throw Error(
						`Invalid MIME type parameter value "${e32}": only HTTP quoted-string token code points are valid.`,
					);
				return this._map.set(t11, e32);
			}
			clear() {
				this._map.clear();
			}
			delete(t11) {
				return (t11 = r2(String(t11))), this._map.delete(t11);
			}
			forEach(t11, e32) {
				this._map.forEach(t11, e32);
			}
			keys() {
				return this._map.keys();
			}
			values() {
				return this._map.values();
			}
			entries() {
				return this._map.entries();
			}
			[Symbol.iterator]() {
				return this._map[Symbol.iterator]();
			}
			constructor(t11) {
				this._map = t11;
			}
		};
	},
});
var v = l({
	"../../../node_modules/whatwg-mimetype/lib/parser.js"(t10, e22) {
		var {
			removeLeadingAndTrailingHTTPWhitespace: r2,
			removeTrailingHTTPWhitespace: n22,
			isHTTPWhitespaceChar: i2,
			solelyContainsHTTPTokenCodePoints: s2,
			soleyContainsHTTPQuotedStringTokenCodePoints: a22,
			asciiLowercase: o2,
			collectAnHTTPQuotedString: u22,
		} = d();
		e22.exports = (t11) => {
			t11 = r2(t11);
			let e32 = 0,
				l22 = "";
			for (; e32 < t11.length && "/" !== t11[e32]; ) (l22 += t11[e32]), ++e32;
			if (0 === l22.length || !s2(l22) || e32 >= t11.length) return null;
			++e32;
			let f2 = "";
			for (; e32 < t11.length && ";" !== t11[e32]; ) (f2 += t11[e32]), ++e32;
			if (0 === (f2 = n22(f2)).length || !s2(f2)) return null;
			let h2 = {
				type: o2(l22),
				subtype: o2(f2),
				parameters: /* @__PURE__ */ new Map(),
			};
			for (; e32 < t11.length; ) {
				for (++e32; i2(t11[e32]); ) ++e32;
				let r3 = "";
				for (; e32 < t11.length && ";" !== t11[e32] && "=" !== t11[e32]; )
					(r3 += t11[e32]), ++e32;
				if (((r3 = o2(r3)), e32 < t11.length)) {
					if (";" === t11[e32]) continue;
					++e32;
				}
				let l3 = null;
				if ('"' === t11[e32])
					for (
						[l3, e32] = u22(t11, e32);
						e32 < t11.length && ";" !== t11[e32];
					)
						++e32;
				else {
					for (l3 = ""; e32 < t11.length && ";" !== t11[e32]; )
						(l3 += t11[e32]), ++e32;
					if ("" === (l3 = n22(l3))) continue;
				}
				r3.length > 0 &&
					s2(r3) &&
					a22(l3) &&
					!h2.parameters.has(r3) &&
					h2.parameters.set(r3, l3);
			}
			return h2;
		};
	},
});
var y = l({
	"../../../node_modules/whatwg-mimetype/lib/serializer.js"(t10, e22) {
		var { solelyContainsHTTPTokenCodePoints: r2 } = d();
		e22.exports = (t11) => {
			let e32 = `${t11.type}/${t11.subtype}`;
			if (0 === t11.parameters.size) return e32;
			for (let [n22, i2] of t11.parameters)
				(e32 += ";" + n22 + "="),
					(r2(i2) && 0 !== i2.length) ||
						((i2 = i2.replace(/(["\\])/gu, "\\$1")), (i2 = `"${i2}"`)),
					(e32 += i2);
			return e32;
		};
	},
});
var m = l({
	"../../../node_modules/whatwg-mimetype/lib/mime-type.js"(t10, e22) {
		var r2 = g(),
			n22 = v(),
			i2 = y(),
			{ asciiLowercase: s2, solelyContainsHTTPTokenCodePoints: a22 } = d();
		e22.exports = class {
			static parse(t11) {
				try {
					return new this(t11);
				} catch (t12) {
					return null;
				}
			}
			get essence() {
				return `${this.type}/${this.subtype}`;
			}
			get type() {
				return this._type;
			}
			set type(t11) {
				if (0 === (t11 = s2(String(t11))).length)
					throw Error("Invalid type: must be a non-empty string");
				if (!a22(t11))
					throw Error(
						`Invalid type ${t11}: must contain only HTTP token code points`,
					);
				this._type = t11;
			}
			get subtype() {
				return this._subtype;
			}
			set subtype(t11) {
				if (0 === (t11 = s2(String(t11))).length)
					throw Error("Invalid subtype: must be a non-empty string");
				if (!a22(t11))
					throw Error(
						`Invalid subtype ${t11}: must contain only HTTP token code points`,
					);
				this._subtype = t11;
			}
			get parameters() {
				return this._parameters;
			}
			toString() {
				return i2(this);
			}
			isJavaScript({ prohibitParameters: t11 = false } = {}) {
				switch (this._type) {
					case "text":
						switch (this._subtype) {
							case "ecmascript":
							case "javascript":
							case "javascript1.0":
							case "javascript1.1":
							case "javascript1.2":
							case "javascript1.3":
							case "javascript1.4":
							case "javascript1.5":
							case "jscript":
							case "livescript":
							case "x-ecmascript":
							case "x-javascript":
								return !t11 || 0 === this._parameters.size;
							default:
								return false;
						}
					case "application":
						switch (this._subtype) {
							case "ecmascript":
							case "javascript":
							case "x-ecmascript":
							case "x-javascript":
								return !t11 || 0 === this._parameters.size;
							default:
								return false;
						}
					default:
						return false;
				}
			}
			isXML() {
				return (
					("xml" === this._subtype &&
						("text" === this._type || "application" === this._type)) ||
					this._subtype.endsWith("+xml")
				);
			}
			isHTML() {
				return "html" === this._subtype && "text" === this._type;
			}
			constructor(t11) {
				t11 = String(t11);
				let e32 = n22(t11);
				if (null === e32)
					throw Error(`Could not parse MIME type string "${t11}"`);
				(this._type = e32.type),
					(this._subtype = e32.subtype),
					(this._parameters = new r2(e32.parameters));
			}
		};
	},
});
var w = h(c());
function b(t10, e22 = "Assertion failed") {
	if (!t10) throw Error(`Assertion Error: ${e22}`);
}
function _(t10) {
	throw Error(`Unexpected value: ${t10}`);
}
var k = {
	Uint8: 1,
	Uint16: 2,
	Uint32: 4,
	BigUint64: 8,
	Int8: 1,
	Int16: 2,
	Int32: 4,
	BigInt64: 8,
	Float32: 4,
	Float64: 8,
};
var I = class {
	getOffset() {
		return this.offset;
	}
	ensureBufferLength(t10) {
		let e22 = this.buffer.byteLength;
		if (!(this.offset + t10 <= e22)) throw Error("Reading out of bounds");
	}
	readUint8() {
		let t10 = k.Uint8;
		this.ensureBufferLength(t10);
		let e22 = this.view.getUint8(this.offset);
		return (this.offset += t10), e22;
	}
	readUint16() {
		let t10 = k.Uint16;
		this.ensureBufferLength(t10);
		let e22 = this.view.getUint16(this.offset);
		return (this.offset += t10), e22;
	}
	readUint32() {
		let t10 = k.Uint32;
		this.ensureBufferLength(t10);
		let e22 = this.view.getUint32(this.offset);
		return (this.offset += t10), e22;
	}
	readUint64() {
		let t10 = this.readBigUint64();
		return Number(t10);
	}
	readBigUint64() {
		let t10 = k.BigUint64;
		this.ensureBufferLength(t10);
		let e22 = this.view.getBigUint64(this.offset);
		return (this.offset += t10), e22;
	}
	readInt8() {
		let t10 = k.Int8;
		this.ensureBufferLength(t10);
		let e22 = this.view.getInt8(this.offset);
		return (this.offset += t10), e22;
	}
	readInt16() {
		let t10 = k.Int16;
		this.ensureBufferLength(t10);
		let e22 = this.view.getInt16(this.offset);
		return (this.offset += t10), e22;
	}
	readInt32() {
		let t10 = k.Int32;
		this.ensureBufferLength(t10);
		let e22 = this.view.getInt32(this.offset);
		return (this.offset += t10), e22;
	}
	readInt64() {
		let t10 = this.readBigInt64();
		return Number(t10);
	}
	readBigInt64() {
		let t10 = k.BigInt64;
		this.ensureBufferLength(t10);
		let e22 = this.view.getBigInt64(this.offset);
		return (this.offset += t10), e22;
	}
	readFloat32() {
		let t10 = k.Float32;
		this.ensureBufferLength(t10);
		let e22 = this.view.getFloat32(this.offset);
		return (this.offset += t10), e22;
	}
	readFloat64() {
		let t10 = k.Float64;
		this.ensureBufferLength(t10);
		let e22 = this.view.getFloat64(this.offset);
		return (this.offset += t10), e22;
	}
	readBuffer(t10) {
		let e22 = this.offset,
			r2 = e22 + t10,
			n22 = this.buffer.slice(e22, r2);
		return (this.offset = r2), n22;
	}
	readString() {
		let t10 = this.readUint32(),
			e22 = this.readBuffer(t10);
		return this.decoder.decode(e22);
	}
	readJson() {
		let t10 = this.readString();
		return JSON.parse(t10);
	}
	constructor(t10) {
		(this.buffer = t10),
			(this.offset = 0),
			(this.view = new DataView(this.buffer)),
			(this.decoder = new TextDecoder());
	}
};
function S(t10) {
	return Number.isFinite(t10);
}
function x(t10) {
	return void 0 === t10;
}
function E(t10) {
	return null === t10;
}
var T = Uint8Array;
var L = Uint16Array;
var M = Int32Array;
var A = new T([
	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
	5, 5, 0 /* unused */, 0, 0 /* impossible */, 0,
]);
var F = new T([
	0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,
	11, 12, 12, 13, 13 /* unused */, 0, 0,
]);
var j = new T([
	16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
]);
var N = function (t10, e22) {
	for (var r2 = new L(31), n22 = 0; n22 < 31; ++n22)
		r2[n22] = e22 += 1 << t10[n22 - 1];
	for (var i2 = new M(r2[30]), n22 = 1; n22 < 30; ++n22)
		for (var s2 = r2[n22]; s2 < r2[n22 + 1]; ++s2)
			i2[s2] = ((s2 - r2[n22]) << 5) | n22;
	return {
		b: r2,
		r: i2,
	};
};
var P = N(A, 2);
var $ = P.b;
var D = P.r;
($[28] = 258), (D[258] = 28);
var C = N(F, 0);
var O = C.b;
var q = C.r;
var z = new L(32768);
for (e = 0; e < 32768; ++e)
	(t =
		((61680 &
			(t =
				((52428 & (t = ((43690 & e) >> 1) | ((21845 & e) << 1))) >> 2) |
				((13107 & t) << 2))) >>
			4) |
		((3855 & t) << 4)),
		(z[e] = (((65280 & t) >> 8) | ((255 & t) << 8)) >> 1);
var R = function (t10, e22, r2) {
	for (var n22, i2 = t10.length, s2 = 0, a22 = new L(e22); s2 < i2; ++s2)
		t10[s2] && ++a22[t10[s2] - 1];
	var o2 = new L(e22);
	for (s2 = 1; s2 < e22; ++s2) o2[s2] = (o2[s2 - 1] + a22[s2 - 1]) << 1;
	if (r2) {
		n22 = new L(1 << e22);
		var u22 = 15 - e22;
		for (s2 = 0; s2 < i2; ++s2)
			if (t10[s2])
				for (
					var l22 = (s2 << 4) | t10[s2],
						f2 = e22 - t10[s2],
						h2 = o2[t10[s2] - 1]++ << f2,
						c2 = h2 | ((1 << f2) - 1);
					h2 <= c2;
					++h2
				)
					n22[z[h2] >> u22] = l22;
	} else
		for (s2 = 0, n22 = new L(i2); s2 < i2; ++s2)
			t10[s2] && (n22[s2] = z[o2[t10[s2] - 1]++] >> (15 - t10[s2]));
	return n22;
};
var H = new T(288);
for (e = 0; e < 144; ++e) H[e] = 8;
for (e = 144; e < 256; ++e) H[e] = 9;
for (e = 256; e < 280; ++e) H[e] = 7;
for (e = 280; e < 288; ++e) H[e] = 8;
var J = new T(32);
for (e = 0; e < 32; ++e) J[e] = 5;
var W = /* @__PURE__ */ R(H, 9, 0);
var G = /* @__PURE__ */ R(H, 9, 1);
var K = /* @__PURE__ */ R(J, 5, 0);
var V = /* @__PURE__ */ R(J, 5, 1);
var X = function (t10) {
	for (var e22 = t10[0], r2 = 1; r2 < t10.length; ++r2)
		t10[r2] > e22 && (e22 = t10[r2]);
	return e22;
};
var Q = function (t10, e22, r2) {
	var n22 = (e22 / 8) | 0;
	return ((t10[n22] | (t10[n22 + 1] << 8)) >> (7 & e22)) & r2;
};
var Z = function (t10, e22) {
	var r2 = (e22 / 8) | 0;
	return (t10[r2] | (t10[r2 + 1] << 8) | (t10[r2 + 2] << 16)) >> (7 & e22);
};
var Y = function (t10) {
	return ((t10 + 7) / 8) | 0;
};
var tt = function (t10, e22, r2) {
	return (
		(null == e22 || e22 < 0) && (e22 = 0),
		(null == r2 || r2 > t10.length) && (r2 = t10.length),
		new T(t10.subarray(e22, r2))
	);
};
var te = [
	"unexpected EOF",
	"invalid block type",
	"invalid length/literal",
	"invalid distance",
	"stream finished",
	"no stream handler",
	,
	"no callback",
	"invalid UTF-8 data",
	"extra field too long",
	"date not in range 1980-2099",
	"filename too long",
	"stream finishing",
	"invalid zip data",
];
var tr = function (t10, e22, r2) {
	var n22 = Error(e22 || te[t10]);
	if (
		((n22.code = t10),
		Error.captureStackTrace && Error.captureStackTrace(n22, tr),
		!r2)
	)
		throw n22;
	return n22;
};
var tn = function (t10, e22, r2, n22) {
	var i2 = t10.length,
		s2 = n22 ? n22.length : 0;
	if (!i2 || (e22.f && !e22.l)) return r2 || new T(0);
	var a22 = !r2,
		o2 = a22 || 2 != e22.i,
		u22 = e22.i;
	a22 && (r2 = new T(3 * i2));
	var l22 = function (t11) {
			var e32 = r2.length;
			if (t11 > e32) {
				var n3 = new T(Math.max(2 * e32, t11));
				n3.set(r2), (r2 = n3);
			}
		},
		f2 = e22.f || 0,
		h2 = e22.p || 0,
		c2 = e22.b || 0,
		p2 = e22.l,
		d2 = e22.d,
		g2 = e22.m,
		v2 = e22.n,
		y2 = 8 * i2;
	do {
		if (!p2) {
			f2 = Q(t10, h2, 1);
			var m2 = Q(t10, h2 + 1, 3);
			if (((h2 += 3), m2)) {
				if (1 == m2) (p2 = G), (d2 = V), (g2 = 9), (v2 = 5);
				else if (2 == m2) {
					var w2 = Q(t10, h2, 31) + 257,
						b2 = Q(t10, h2 + 10, 15) + 4,
						_2 = w2 + Q(t10, h2 + 5, 31) + 1;
					h2 += 14;
					for (var k2 = new T(_2), I2 = new T(19), U2 = 0; U2 < b2; ++U2)
						I2[j[U2]] = Q(t10, h2 + 3 * U2, 7);
					h2 += 3 * b2;
					for (
						var S2 = X(I2), x2 = (1 << S2) - 1, E2 = R(I2, S2, 1), U2 = 0;
						U2 < _2;
					) {
						var B2 = E2[Q(t10, h2, x2)];
						h2 += 15 & B2;
						var L2 = B2 >> 4;
						if (L2 < 16) k2[U2++] = L2;
						else {
							var M2 = 0,
								N2 = 0;
							for (
								16 == L2
									? ((N2 = 3 + Q(t10, h2, 3)), (h2 += 2), (M2 = k2[U2 - 1]))
									: 17 == L2
										? ((N2 = 3 + Q(t10, h2, 7)), (h2 += 3))
										: 18 == L2 && ((N2 = 11 + Q(t10, h2, 127)), (h2 += 7));
								N2--;
							)
								k2[U2++] = M2;
						}
					}
					var P2 = k2.subarray(0, w2),
						D2 = k2.subarray(w2);
					(g2 = X(P2)), (v2 = X(D2)), (p2 = R(P2, g2, 1)), (d2 = R(D2, v2, 1));
				} else tr(1);
			} else {
				var L2 = Y(h2) + 4,
					C2 = t10[L2 - 4] | (t10[L2 - 3] << 8),
					q2 = L2 + C2;
				if (q2 > i2) {
					u22 && tr(0);
					break;
				}
				o2 && l22(c2 + C2),
					r2.set(t10.subarray(L2, q2), c2),
					(e22.b = c2 += C2),
					(e22.p = h2 = 8 * q2),
					(e22.f = f2);
				continue;
			}
			if (h2 > y2) {
				u22 && tr(0);
				break;
			}
		}
		o2 && l22(c2 + 131072);
		for (var z2 = (1 << g2) - 1, H2 = (1 << v2) - 1, J2 = h2; ; J2 = h2) {
			var M2 = p2[Z(t10, h2) & z2],
				W2 = M2 >> 4;
			if ((h2 += 15 & M2) > y2) {
				u22 && tr(0);
				break;
			}
			if ((M2 || tr(2), W2 < 256)) r2[c2++] = W2;
			else if (256 == W2) {
				(J2 = h2), (p2 = null);
				break;
			} else {
				var K2 = W2 - 254;
				if (W2 > 264) {
					var U2 = W2 - 257,
						te2 = A[U2];
					(K2 = Q(t10, h2, (1 << te2) - 1) + $[U2]), (h2 += te2);
				}
				var tn2 = d2[Z(t10, h2) & H2],
					ti2 = tn2 >> 4;
				tn2 || tr(3), (h2 += 15 & tn2);
				var D2 = O[ti2];
				if (ti2 > 3) {
					var te2 = F[ti2];
					(D2 += Z(t10, h2) & ((1 << te2) - 1)), (h2 += te2);
				}
				if (h2 > y2) {
					u22 && tr(0);
					break;
				}
				o2 && l22(c2 + 131072);
				var ts2 = c2 + K2;
				if (c2 < D2) {
					var ta2 = s2 - D2,
						to2 = Math.min(D2, ts2);
					for (ta2 + c2 < 0 && tr(3); c2 < to2; ++c2) r2[c2] = n22[ta2 + c2];
				}
				for (; c2 < ts2; ++c2) r2[c2] = r2[c2 - D2];
			}
		}
		(e22.l = p2),
			(e22.p = J2),
			(e22.b = c2),
			(e22.f = f2),
			p2 && ((f2 = 1), (e22.m = g2), (e22.d = d2), (e22.n = v2));
	} while (!f2);
	return c2 != r2.length && a22 ? tt(r2, 0, c2) : r2.subarray(0, c2);
};
var ti = function (t10, e22, r2) {
	r2 <<= 7 & e22;
	var n22 = (e22 / 8) | 0;
	(t10[n22] |= r2), (t10[n22 + 1] |= r2 >> 8);
};
var ts = function (t10, e22, r2) {
	r2 <<= 7 & e22;
	var n22 = (e22 / 8) | 0;
	(t10[n22] |= r2), (t10[n22 + 1] |= r2 >> 8), (t10[n22 + 2] |= r2 >> 16);
};
var ta = function (t10, e22) {
	for (var r2 = [], n22 = 0; n22 < t10.length; ++n22)
		t10[n22] &&
			r2.push({
				s: n22,
				f: t10[n22],
			});
	var i2 = r2.length,
		s2 = r2.slice();
	if (!i2)
		return {
			t: tp,
			l: 0,
		};
	if (1 == i2) {
		var a22 = new T(r2[0].s + 1);
		return (
			(a22[r2[0].s] = 1),
			{
				t: a22,
				l: 1,
			}
		);
	}
	r2.sort(function (t11, e32) {
		return t11.f - e32.f;
	}),
		r2.push({
			s: -1,
			f: 25001,
		});
	var o2 = r2[0],
		u22 = r2[1],
		l22 = 0,
		f2 = 1,
		h2 = 2;
	for (
		r2[0] = {
			s: -1,
			f: o2.f + u22.f,
			l: o2,
			r: u22,
		};
		f2 != i2 - 1;
	)
		(o2 = r2[r2[l22].f < r2[h2].f ? l22++ : h2++]),
			(u22 = r2[l22 != f2 && r2[l22].f < r2[h2].f ? l22++ : h2++]),
			(r2[f2++] = {
				s: -1,
				f: o2.f + u22.f,
				l: o2,
				r: u22,
			});
	for (var c2 = s2[0].s, n22 = 1; n22 < i2; ++n22)
		s2[n22].s > c2 && (c2 = s2[n22].s);
	var p2 = new L(c2 + 1),
		d2 = to(r2[f2 - 1], p2, 0);
	if (d2 > e22) {
		var n22 = 0,
			g2 = 0,
			v2 = d2 - e22,
			y2 = 1 << v2;
		for (
			s2.sort(function (t11, e32) {
				return p2[e32.s] - p2[t11.s] || t11.f - e32.f;
			});
			n22 < i2;
			++n22
		) {
			var m2 = s2[n22].s;
			if (p2[m2] > e22) (g2 += y2 - (1 << (d2 - p2[m2]))), (p2[m2] = e22);
			else break;
		}
		for (g2 >>= v2; g2 > 0; ) {
			var w2 = s2[n22].s;
			p2[w2] < e22 ? (g2 -= 1 << (e22 - p2[w2]++ - 1)) : ++n22;
		}
		for (; n22 >= 0 && g2; --n22) {
			var b2 = s2[n22].s;
			p2[b2] == e22 && (--p2[b2], ++g2);
		}
		d2 = e22;
	}
	return {
		t: new T(p2),
		l: d2,
	};
};
var to = function (t10, e22, r2) {
	return -1 == t10.s
		? Math.max(to(t10.l, e22, r2 + 1), to(t10.r, e22, r2 + 1))
		: (e22[t10.s] = r2);
};
var tu = function (t10) {
	for (var e22 = t10.length; e22 && !t10[--e22]; );
	for (
		var r2 = new L(++e22),
			n22 = 0,
			i2 = t10[0],
			s2 = 1,
			a22 = function (t11) {
				r2[n22++] = t11;
			},
			o2 = 1;
		o2 <= e22;
		++o2
	)
		if (t10[o2] == i2 && o2 != e22) ++s2;
		else {
			if (!i2 && s2 > 2) {
				for (; s2 > 138; s2 -= 138) a22(32754);
				s2 > 2 &&
					(a22(s2 > 10 ? ((s2 - 11) << 5) | 28690 : ((s2 - 3) << 5) | 12305),
					(s2 = 0));
			} else if (s2 > 3) {
				for (a22(i2), --s2; s2 > 6; s2 -= 6) a22(8304);
				s2 > 2 && (a22(((s2 - 3) << 5) | 8208), (s2 = 0));
			}
			for (; s2--; ) a22(i2);
			(s2 = 1), (i2 = t10[o2]);
		}
	return {
		c: r2.subarray(0, n22),
		n: e22,
	};
};
var tl = function (t10, e22) {
	for (var r2 = 0, n22 = 0; n22 < e22.length; ++n22) r2 += t10[n22] * e22[n22];
	return r2;
};
var tf = function (t10, e22, r2) {
	var n22 = r2.length,
		i2 = Y(e22 + 2);
	(t10[i2] = 255 & n22),
		(t10[i2 + 1] = n22 >> 8),
		(t10[i2 + 2] = 255 ^ t10[i2]),
		(t10[i2 + 3] = 255 ^ t10[i2 + 1]);
	for (var s2 = 0; s2 < n22; ++s2) t10[i2 + s2 + 4] = r2[s2];
	return (i2 + 4 + n22) * 8;
};
var th = function (t10, e22, r2, n22, i2, s2, a22, o2, u22, l22, f2) {
	ti(e22, f2++, r2), ++i2[256];
	for (
		var h2,
			c2,
			p2,
			d2,
			g2 = ta(i2, 15),
			v2 = g2.t,
			y2 = g2.l,
			m2 = ta(s2, 15),
			w2 = m2.t,
			b2 = m2.l,
			_2 = tu(v2),
			k2 = _2.c,
			I2 = _2.n,
			U2 = tu(w2),
			S2 = U2.c,
			x2 = U2.n,
			E2 = new L(19),
			B2 = 0;
		B2 < k2.length;
		++B2
	)
		++E2[31 & k2[B2]];
	for (var B2 = 0; B2 < S2.length; ++B2) ++E2[31 & S2[B2]];
	for (
		var T2 = ta(E2, 7), M2 = T2.t, N2 = T2.l, P2 = 19;
		P2 > 4 && !M2[j[P2 - 1]];
		--P2
	);
	var $2 = (l22 + 5) << 3,
		D2 = tl(i2, H) + tl(s2, J) + a22,
		C2 =
			tl(i2, v2) +
			tl(s2, w2) +
			a22 +
			14 +
			3 * P2 +
			tl(E2, M2) +
			2 * E2[16] +
			3 * E2[17] +
			7 * E2[18];
	if (u22 >= 0 && $2 <= D2 && $2 <= C2)
		return tf(e22, f2, t10.subarray(u22, u22 + l22));
	if ((ti(e22, f2, 1 + (C2 < D2)), (f2 += 2), C2 < D2)) {
		(h2 = R(v2, y2, 0)), (c2 = v2), (p2 = R(w2, b2, 0)), (d2 = w2);
		var O2 = R(M2, N2, 0);
		ti(e22, f2, I2 - 257),
			ti(e22, f2 + 5, x2 - 1),
			ti(e22, f2 + 10, P2 - 4),
			(f2 += 14);
		for (var B2 = 0; B2 < P2; ++B2) ti(e22, f2 + 3 * B2, M2[j[B2]]);
		f2 += 3 * P2;
		for (var q2 = [k2, S2], z2 = 0; z2 < 2; ++z2)
			for (var G2 = q2[z2], B2 = 0; B2 < G2.length; ++B2) {
				var V2 = 31 & G2[B2];
				ti(e22, f2, O2[V2]),
					(f2 += M2[V2]),
					V2 > 15 && (ti(e22, f2, (G2[B2] >> 5) & 127), (f2 += G2[B2] >> 12));
			}
	} else (h2 = W), (c2 = H), (p2 = K), (d2 = J);
	for (var B2 = 0; B2 < o2; ++B2) {
		var X2 = n22[B2];
		if (X2 > 255) {
			var V2 = (X2 >> 18) & 31;
			ts(e22, f2, h2[V2 + 257]),
				(f2 += c2[V2 + 257]),
				V2 > 7 && (ti(e22, f2, (X2 >> 23) & 31), (f2 += A[V2]));
			var Q2 = 31 & X2;
			ts(e22, f2, p2[Q2]),
				(f2 += d2[Q2]),
				Q2 > 3 && (ts(e22, f2, (X2 >> 5) & 8191), (f2 += F[Q2]));
		} else ts(e22, f2, h2[X2]), (f2 += c2[X2]);
	}
	return ts(e22, f2, h2[256]), f2 + c2[256];
};
var tc = /* @__PURE__ */ new M([
	65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632,
]);
var tp = /* @__PURE__ */ new T(0);
var td = function (t10, e22, r2, n22, i2, s2) {
	var a22 = s2.z || t10.length,
		o2 = new T(n22 + a22 + 5 * (1 + Math.ceil(a22 / 7e3)) + i2),
		u22 = o2.subarray(n22, o2.length - i2),
		l22 = s2.l,
		f2 = 7 & (s2.r || 0);
	if (e22) {
		f2 && (u22[0] = s2.r >> 3);
		for (
			var h2 = tc[e22 - 1],
				c2 = h2 >> 13,
				p2 = 8191 & h2,
				d2 = (1 << r2) - 1,
				g2 = s2.p || new L(32768),
				v2 = s2.h || new L(d2 + 1),
				y2 = Math.ceil(r2 / 3),
				m2 = 2 * y2,
				w2 = function (e32) {
					return (t10[e32] ^ (t10[e32 + 1] << y2) ^ (t10[e32 + 2] << m2)) & d2;
				},
				b2 = new M(25e3),
				_2 = new L(288),
				k2 = new L(32),
				I2 = 0,
				U2 = 0,
				S2 = s2.i || 0,
				x2 = 0,
				E2 = s2.w || 0,
				B2 = 0;
			S2 + 2 < a22;
			++S2
		) {
			var j2 = w2(S2),
				N2 = 32767 & S2,
				P2 = v2[j2];
			if (((g2[N2] = P2), (v2[j2] = N2), E2 <= S2)) {
				var $2 = a22 - S2;
				if ((I2 > 7e3 || x2 > 24576) && ($2 > 423 || !l22)) {
					(f2 = th(t10, u22, 0, b2, _2, k2, U2, x2, B2, S2 - B2, f2)),
						(x2 = I2 = U2 = 0),
						(B2 = S2);
					for (var C2 = 0; C2 < 286; ++C2) _2[C2] = 0;
					for (var C2 = 0; C2 < 30; ++C2) k2[C2] = 0;
				}
				var O2 = 2,
					z2 = 0,
					R2 = p2,
					H2 = (N2 - P2) & 32767;
				if ($2 > 2 && j2 == w2(S2 - H2))
					for (
						var J2 = Math.min(c2, $2) - 1,
							W2 = Math.min(32767, S2),
							G2 = Math.min(258, $2);
						H2 <= W2 && --R2 && N2 != P2;
					) {
						if (t10[S2 + O2] == t10[S2 + O2 - H2]) {
							for (
								var K2 = 0;
								K2 < G2 && t10[S2 + K2] == t10[S2 + K2 - H2];
								++K2
							);
							if (K2 > O2) {
								if (((O2 = K2), (z2 = H2), K2 > J2)) break;
								for (
									var V2 = Math.min(H2, K2 - 2), X2 = 0, C2 = 0;
									C2 < V2;
									++C2
								) {
									var Q2 = (S2 - H2 + C2) & 32767,
										Z2 = g2[Q2],
										te2 = (Q2 - Z2) & 32767;
									te2 > X2 && ((X2 = te2), (P2 = Q2));
								}
							}
						}
						(P2 = g2[(N2 = P2)]), (H2 += (N2 - P2) & 32767);
					}
				if (z2) {
					b2[x2++] = 268435456 | (D[O2] << 18) | q[z2];
					var tr2 = 31 & D[O2],
						tn2 = 31 & q[z2];
					(U2 += A[tr2] + F[tn2]),
						++_2[257 + tr2],
						++k2[tn2],
						(E2 = S2 + O2),
						++I2;
				} else (b2[x2++] = t10[S2]), ++_2[t10[S2]];
			}
		}
		for (S2 = Math.max(S2, E2); S2 < a22; ++S2)
			(b2[x2++] = t10[S2]), ++_2[t10[S2]];
		(f2 = th(t10, u22, l22, b2, _2, k2, U2, x2, B2, S2 - B2, f2)),
			l22 ||
				((s2.r = (7 & f2) | (u22[(f2 / 8) | 0] << 3)),
				(f2 -= 7),
				(s2.h = v2),
				(s2.p = g2),
				(s2.i = S2),
				(s2.w = E2));
	} else {
		for (var S2 = s2.w || 0; S2 < a22 + l22; S2 += 65535) {
			var ti2 = S2 + 65535;
			ti2 >= a22 && ((u22[(f2 / 8) | 0] = l22), (ti2 = a22)),
				(f2 = tf(u22, f2 + 1, t10.subarray(S2, ti2)));
		}
		s2.i = a22;
	}
	return tt(o2, 0, n22 + Y(f2) + i2);
};
var tg = function (t10, e22, r2, n22, i2) {
	if (
		!i2 &&
		((i2 = {
			l: 1,
		}),
		e22.dictionary)
	) {
		var s2 = e22.dictionary.subarray(-32768),
			a22 = new T(s2.length + t10.length);
		a22.set(s2), a22.set(t10, s2.length), (t10 = a22), (i2.w = s2.length);
	}
	return td(
		t10,
		null == e22.level ? 6 : e22.level,
		null == e22.mem
			? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(t10.length))))
			: 12 + e22.mem,
		r2,
		n22,
		i2,
	);
};
function tv(t10, e22) {
	return tg(t10, e22 || {}, 0, 0);
}
function ty(t10, e22) {
	return tn(
		t10,
		{
			i: 2,
		},
		e22 && e22.out,
		e22 && e22.dictionary,
	);
}
var tm = "undefined" != typeof TextDecoder && /* @__PURE__ */ new TextDecoder();
var tw = 0;
try {
	tm.decode(tp, {
		stream: true,
	}),
		(tw = 1);
} catch (t10) {}
var tb = h(p());
var t_ = 1024;
var tk = 1.5;
var tI = (t10) => 2 ** t10 - 1;
var tU = (t10) => -(2 ** (t10 - 1));
var tS = (t10) => 2 ** (t10 - 1) - 1;
var tx = {
	Uint8: 0,
	Uint16: 0,
	Uint32: 0,
	Uint64: 0,
	BigUint64: 0,
	Int8: tU(8),
	Int16: tU(16),
	Int32: tU(32),
	Int64: Number.MIN_SAFE_INTEGER,
	BigInt64: -(BigInt(2) ** BigInt(63)),
};
var tE = {
	Uint8: tI(8),
	Uint16: tI(16),
	Uint32: tI(32),
	Uint64: Number.MAX_SAFE_INTEGER,
	BigUint64: BigInt(2) ** BigInt(64) - BigInt(1),
	Int8: tS(8),
	Int16: tS(16),
	Int32: tS(32),
	Int64: Number.MAX_SAFE_INTEGER,
	BigInt64: BigInt(2) ** BigInt(63) - BigInt(1),
};
function tB(t10, e22, r2, n22) {
	b(t10 >= e22, `${t10} outside lower bound for ${n22}`),
		b(t10 <= r2, `${t10} outside upper bound for ${n22}`);
}
var tT = class {
	getOffset() {
		return this.offset;
	}
	slice(t10 = 0, e22 = this.offset) {
		return this.buffer.slice(t10, e22);
	}
	subarray(t10 = 0, e22 = this.offset) {
		return new Uint8Array(this.buffer, t10, e22);
	}
	ensureBufferLength(t10) {
		let e22 = this.buffer.byteLength;
		if (this.offset + t10 <= e22) return;
		let r2 = new ArrayBuffer(Math.ceil(e22 * tk) + t10);
		tL(this.buffer, r2, 0), (this.buffer = r2), (this.view = new DataView(r2));
	}
	writeUint8(t10) {
		tB(t10, tx.Uint8, tE.Uint8, "Uint8");
		let e22 = k.Uint8;
		this.ensureBufferLength(e22),
			this.view.setUint8(this.offset, t10),
			(this.offset += e22);
	}
	writeUint16(t10) {
		tB(t10, tx.Uint16, tE.Uint16, "Uint16");
		let e22 = k.Uint16;
		this.ensureBufferLength(e22),
			this.view.setUint16(this.offset, t10),
			(this.offset += e22);
	}
	writeUint32(t10) {
		tB(t10, tx.Uint32, tE.Uint32, "Uint32");
		let e22 = k.Uint32;
		this.ensureBufferLength(e22),
			this.view.setUint32(this.offset, t10),
			(this.offset += e22);
	}
	writeUint64(t10) {
		tB(t10, tx.Uint64, tE.Uint64, "Uint64");
		let e22 = BigInt(t10);
		this.writeBigUint64(e22);
	}
	writeBigUint64(t10) {
		tB(t10, tx.BigUint64, tE.BigUint64, "BigUint64");
		let e22 = k.BigUint64;
		this.ensureBufferLength(e22),
			this.view.setBigUint64(this.offset, t10),
			(this.offset += e22);
	}
	writeInt8(t10) {
		tB(t10, tx.Int8, tE.Int8, "Int8");
		let e22 = k.Int8;
		this.ensureBufferLength(e22),
			this.view.setInt8(this.offset, t10),
			(this.offset += e22);
	}
	writeInt16(t10) {
		tB(t10, tx.Int16, tE.Int16, "Int16");
		let e22 = k.Int16;
		this.ensureBufferLength(e22),
			this.view.setInt16(this.offset, t10),
			(this.offset += e22);
	}
	writeInt32(t10) {
		tB(t10, tx.Int32, tE.Int32, "Int32");
		let e22 = k.Int32;
		this.ensureBufferLength(e22),
			this.view.setInt32(this.offset, t10),
			(this.offset += e22);
	}
	writeInt64(t10) {
		tB(t10, tx.Int64, tE.Int64, "Int64");
		let e22 = BigInt(t10);
		this.writeBigInt64(e22);
	}
	writeBigInt64(t10) {
		tB(t10, tx.BigInt64, tE.BigInt64, "BigInt64");
		let e22 = k.BigInt64;
		this.ensureBufferLength(e22),
			this.view.setBigInt64(this.offset, t10),
			(this.offset += e22);
	}
	writeFloat32(t10) {
		let e22 = k.Float32;
		this.ensureBufferLength(e22),
			this.view.setFloat32(this.offset, t10),
			(this.offset += e22);
	}
	writeFloat64(t10) {
		let e22 = k.Float64;
		this.ensureBufferLength(e22),
			this.view.setFloat64(this.offset, t10),
			(this.offset += e22);
	}
	writeBuffer(t10) {
		let e22 = t10.byteLength;
		this.ensureBufferLength(e22),
			tL(t10, this.buffer, this.offset),
			(this.offset += e22);
	}
	encodeString(t10) {
		let e22 = this.encodedStrings.get(t10);
		if (e22) return e22;
		let r2 = this.encoder.encode(t10);
		return this.encodedStrings.set(t10, r2), r2;
	}
	writeString(t10) {
		let e22 = this.encodeString(t10),
			r2 = e22.byteLength;
		this.writeUint32(r2), this.writeBuffer(e22);
	}
	writeJson(t10) {
		let e22 = JSON.stringify(t10);
		this.writeString(e22);
	}
	constructor() {
		(this.offset = 0),
			(this.buffer = new ArrayBuffer(t_)),
			(this.view = new DataView(this.buffer)),
			(this.encoder = new TextEncoder()),
			(this.encodedStrings = /* @__PURE__ */ new Map());
	}
};
function tL(t10, e22, r2) {
	let n22 = new Uint8Array(t10),
		i2 = new Uint8Array(e22);
	i2.set(n22, r2);
}
var tM = class {
	static fromString(t10) {
		let [e22, r2, n22] = t10.split("/").map(Number);
		return (
			b(S(e22), "Invalid chunkId"),
			b(S(r2), "Invalid offset"),
			b(S(n22), "Invalid length"),
			new tM(e22, r2, n22)
		);
	}
	toString() {
		return `${this.chunkId}/${this.offset}/${this.length}`;
	}
	static read(t10) {
		let e22 = t10.readUint16(),
			r2 = t10.readUint32(),
			n22 = t10.readUint32();
		return new tM(e22, r2, n22);
	}
	write(t10) {
		t10.writeUint16(this.chunkId),
			t10.writeUint32(this.offset),
			t10.writeUint32(this.length);
	}
	compare(t10) {
		return this.chunkId < t10.chunkId
			? -1
			: this.chunkId > t10.chunkId
				? 1
				: this.offset < t10.offset
					? -1
					: this.offset > t10.offset
						? 1
						: (b(this.length === t10.length), 0);
	}
	constructor(t10, e22, r2) {
		(this.chunkId = t10), (this.offset = e22), (this.length = r2);
	}
};
function tF(t10) {
	if (E(t10)) return 0;
	switch (t10.type) {
		case tA.Array:
			return 1;
		case tA.Boolean:
			return 2;
		case tA.Color:
			return 3;
		case tA.Date:
			return 4;
		case tA.Enum:
			return 5;
		case tA.File:
			return 6;
		case tA.ResponsiveImage:
			return 10;
		case tA.Link:
			return 7;
		case tA.Number:
			return 8;
		case tA.Object:
			return 9;
		case tA.RichText:
			return 11;
		case tA.String:
			return 12;
		default:
			_(t10);
	}
}
((t10) => {
	(t10.read = function (t11) {
		let e22 = t11.readUint8();
		switch (e22) {
			case 0:
				return null;
			case 1:
				return tj.read(t11);
			case 2:
				return tN.read(t11);
			case 3:
				return tP.read(t11);
			case 4:
				return t$.read(t11);
			case 5:
				return tD.read(t11);
			case 6:
				return tC.read(t11);
			case 7:
				return tO.read(t11);
			case 8:
				return tq.read(t11);
			case 9:
				return tz.read(t11);
			case 10:
				return tR.read(t11);
			case 11:
				return tH.read(t11);
			case 12:
				return tJ.read(t11);
			default:
				_(e22);
		}
	}),
		(t10.write = function (t11, e22) {
			let r2 = tF(e22);
			if ((t11.writeUint8(r2), !E(e22)))
				switch (e22.type) {
					case tA.Array:
						return tj.write(t11, e22);
					case tA.Boolean:
						return tN.write(t11, e22);
					case tA.Color:
						return tP.write(t11, e22);
					case tA.Date:
						return t$.write(t11, e22);
					case tA.Enum:
						return tD.write(t11, e22);
					case tA.File:
						return tC.write(t11, e22);
					case tA.Link:
						return tO.write(t11, e22);
					case tA.Number:
						return tq.write(t11, e22);
					case tA.Object:
						return tz.write(t11, e22);
					case tA.ResponsiveImage:
						return tR.write(t11, e22);
					case tA.RichText:
						return tH.write(t11, e22);
					case tA.String:
						return tJ.write(t11, e22);
					default:
						_(e22);
				}
		}),
		(t10.compare = function (t11, e22, r2) {
			let n22 = tF(t11),
				i2 = tF(e22);
			if (n22 < i2) return -1;
			if (n22 > i2) return 1;
			if (E(t11) || E(e22)) return 0;
			switch (t11.type) {
				case tA.Array:
					return b(e22.type === tA.Array), tj.compare(t11, e22, r2);
				case tA.Boolean:
					return b(e22.type === tA.Boolean), tN.compare(t11, e22, r2);
				case tA.Color:
					return b(e22.type === tA.Color), tP.compare(t11, e22, r2);
				case tA.Date:
					return b(e22.type === tA.Date), t$.compare(t11, e22, r2);
				case tA.Enum:
					return b(e22.type === tA.Enum), tD.compare(t11, e22, r2);
				case tA.File:
					return b(e22.type === tA.File), tC.compare(t11, e22, r2);
				case tA.Link:
					return b(e22.type === tA.Link), tO.compare(t11, e22, r2);
				case tA.Number:
					return b(e22.type === tA.Number), tq.compare(t11, e22, r2);
				case tA.Object:
					return b(e22.type === tA.Object), tz.compare(t11, e22, r2);
				case tA.ResponsiveImage:
					return b(e22.type === tA.ResponsiveImage), tR.compare(t11, e22, r2);
				case tA.RichText:
					return b(e22.type === tA.RichText), tH.compare(t11, e22, r2);
				case tA.String:
					return b(e22.type === tA.String), tJ.compare(t11, e22, r2);
				default:
					_(t11);
			}
		});
})(r || (r = {}));
var tj = {
	read(t10) {
		let e22 = t10.readUint16(),
			n22 = [];
		for (let i2 = 0; i2 < e22; i2++) {
			let e32 = r.read(t10);
			n22.push(e32);
		}
		return {
			type: tA.Array,
			value: n22,
		};
	},
	write(t10, e22) {
		for (let n22 of (t10.writeUint16(e22.value.length), e22.value))
			r.write(t10, n22);
	},
	compare(t10, e22, n22) {
		let i2 = t10.value.length,
			s2 = e22.value.length;
		if (i2 < s2) return -1;
		if (i2 > s2) return 1;
		for (let s3 = 0; s3 < i2; s3++) {
			let i3 = t10.value[s3],
				a22 = e22.value[s3];
			b(!x(i3), "Left item must exist"), b(!x(a22), "Right item must exist");
			let o2 = r.compare(i3, a22, n22);
			if (0 !== o2) return o2;
		}
		return 0;
	},
};
var tN = {
	read: (t10) => ({
		type: tA.Boolean,
		value: 0 !== t10.readUint8(),
	}),
	write(t10, e22) {
		t10.writeUint8(e22.value ? 1 : 0);
	},
	compare: (t10, e22) =>
		t10.value < e22.value ? -1 : t10.value > e22.value ? 1 : 0,
};
var tP = {
	read: (t10) => ({
		type: tA.Color,
		value: t10.readString(),
	}),
	write(t10, e22) {
		t10.writeString(e22.value);
	},
	compare: (t10, e22) =>
		t10.value < e22.value ? -1 : t10.value > e22.value ? 1 : 0,
};
var t$ = {
	read(t10) {
		let e22 = t10.readInt64(),
			r2 = new Date(e22);
		return {
			type: tA.Date,
			value: r2.toISOString(),
		};
	},
	write(t10, e22) {
		let r2 = new Date(e22.value),
			n22 = r2.getTime();
		t10.writeInt64(n22);
	},
	compare(t10, e22) {
		let r2 = new Date(t10.value),
			n22 = new Date(e22.value);
		return r2 < n22 ? -1 : r2 > n22 ? 1 : 0;
	},
};
var tD = {
	read: (t10) => ({
		type: tA.Enum,
		value: t10.readString(),
	}),
	write(t10, e22) {
		t10.writeString(e22.value);
	},
	compare: (t10, e22) =>
		t10.value < e22.value ? -1 : t10.value > e22.value ? 1 : 0,
};
var tC = {
	read: (t10) => ({
		type: tA.File,
		value: t10.readString(),
	}),
	write(t10, e22) {
		t10.writeString(e22.value);
	},
	compare: (t10, e22) =>
		t10.value < e22.value ? -1 : t10.value > e22.value ? 1 : 0,
};
var tO = {
	read: (t10) => ({
		type: tA.Link,
		value: t10.readJson(),
	}),
	write(t10, e22) {
		t10.writeJson(e22.value);
	},
	compare(t10, e22) {
		let r2 = JSON.stringify(t10.value),
			n22 = JSON.stringify(e22.value);
		return r2 < n22 ? -1 : r2 > n22 ? 1 : 0;
	},
};
var tq = {
	read: (t10) => ({
		type: tA.Number,
		value: t10.readFloat64(),
	}),
	write(t10, e22) {
		t10.writeFloat64(e22.value);
	},
	compare: (t10, e22) =>
		t10.value < e22.value ? -1 : t10.value > e22.value ? 1 : 0,
};
var tz = {
	read(t10) {
		let e22 = t10.readUint16(),
			n22 = {};
		for (let i2 = 0; i2 < e22; i2++) {
			let e32 = t10.readString();
			n22[e32] = r.read(t10);
		}
		return {
			type: tA.Object,
			value: n22,
		};
	},
	write(t10, e22) {
		let n22 = Object.entries(e22.value);
		for (let [e32, i2] of (t10.writeUint16(n22.length), n22))
			t10.writeString(e32), r.write(t10, i2);
	},
	compare(t10, e22, n22) {
		let i2 = Object.keys(t10.value).sort(),
			s2 = Object.keys(e22.value).sort();
		if (i2.length < s2.length) return -1;
		if (i2.length > s2.length) return 1;
		for (let a22 = 0; a22 < i2.length; a22++) {
			let o2 = i2[a22],
				u22 = s2[a22];
			if (
				(b(!x(o2), "Left key must exist"),
				b(!x(u22), "Left key must exist"),
				o2 < u22)
			)
				return -1;
			if (o2 > u22) return 1;
			let l22 = t10.value[o2],
				f2 = e22.value[u22];
			b(!x(l22), "Left value must exist"), b(!x(f2), "Right value must exist");
			let h2 = r.compare(l22, f2, n22);
			if (0 !== h2) return h2;
		}
		return 0;
	},
};
var tR = {
	read: (t10) => ({
		type: tA.ResponsiveImage,
		value: t10.readJson(),
	}),
	write(t10, e22) {
		t10.writeJson(e22.value);
	},
	compare(t10, e22) {
		let r2 = JSON.stringify(t10.value),
			n22 = JSON.stringify(e22.value);
		return r2 < n22 ? -1 : r2 > n22 ? 1 : 0;
	},
};
var tH = {
	read: (t10) => ({
		type: tA.RichText,
		value: t10.readUint32(),
	}),
	write(t10, e22) {
		t10.writeUint32(e22.value);
	},
	compare(t10, e22) {
		let r2 = t10.value,
			n22 = e22.value;
		return r2 < n22 ? -1 : r2 > n22 ? 1 : 0;
	},
};
var tJ = {
	read: (t10) => ({
		type: tA.String,
		value: t10.readString(),
	}),
	write(t10, e22) {
		t10.writeString(e22.value);
	},
	compare(t10, e22, r2) {
		let n22 = t10.value,
			i2 = e22.value;
		return (0 === r2.type &&
			((n22 = t10.value.toLowerCase()), (i2 = e22.value.toLowerCase())),
		n22 < i2)
			? -1
			: n22 > i2
				? 1
				: 0;
	},
};
var tG = h(m());
var tK = "\r\n";
var tV = "--";
async function tX(t10, e22) {
	let r2 = await fetch(t10, {
		headers: {
			Range: t5(e22),
		},
	});
	if (!r2.ok) throw Error(`Request failed: ${r2.status} ${r2.statusText}`);
	let n22 = await r2.arrayBuffer(),
		i2 = new Uint8Array(n22);
	if (200 === r2.status)
		return e22.map((t11) => {
			if (t11.to > i2.length) throw Error("Missing data");
			return i2.slice(t11.from, t11.to);
		});
	if (206 === r2.status) {
		let t11 = r2.headers.get("Content-Type");
		if (!t11) throw Error("Missing Content-Type header");
		let n3 = new t1(),
			s2 = new tG.default(t11);
		if ("multipart" === s2.type && "byteranges" === s2.subtype) {
			let t12 = s2.parameters.get("boundary");
			if (!t12) throw Error("Missing boundary parameter");
			let e32 = tY(i2, t12);
			for (let { headers: t13, body: r3 } of e32) {
				let e4 = t13.get("Content-Range");
				if (!e4) throw Error("Missing Content-Range header");
				let i3 = t0(e4);
				if ("bytes" !== i3.unit) throw Error("Unsupported unit");
				n3.write(i3.start, r3);
			}
		} else {
			let t12 = r2.headers.get("Content-Range");
			if (!t12) throw Error("Missing Content-Range header");
			let e32 = t0(t12);
			if ("bytes" !== e32.unit) throw Error("Unsupported unit");
			n3.write(e32.start, i2);
		}
		return e22.map((t12) => n3.read(t12.from, t12.to - t12.from));
	}
	throw Error(`Unsupported response: ${r2.status} ${r2.statusText}`);
}
var tQ = new TextEncoder();
var tZ = new TextDecoder();
function tY(t10, e22) {
	let r2 = tQ.encode(tV + e22),
		n22 = t3(t10, r2);
	if (x(n22)) throw Error("Missing parts start");
	let i2 = n22 + r2.length,
		s2 = tQ.encode(tK + tV + e22 + tV),
		a22 = t6(t10, s2);
	if (x(a22)) throw Error("Missing parts end");
	let o2 = tQ.encode(tK + tV + e22),
		u22 = t10.subarray(i2, a22),
		l22 = t2(u22, o2);
	return l22.map((t11) => {
		let e32 = tQ.encode(tK + tK),
			r3 = t3(t11, e32);
		if (x(r3)) throw Error("Missing headers end");
		let n3 = tQ.encode(tK),
			i3 = t11.subarray(0, r3),
			s3 = t2(i3, n3),
			a3 = new Headers();
		for (let t12 of s3) {
			let e4 = tZ.decode(t12),
				[r4, n4] = e4.split(": ", 2);
			r4 && n4 && a3.append(r4, n4);
		}
		let o3 = r3 + e32.length,
			u3 = t11.slice(o3);
		return {
			headers: a3,
			body: u3,
		};
	});
}
function t0(t10) {
	let e22 = RegExp(
		"^(?<unit>\\w+) (?<start>\\d+)-(?<end>\\d+)\\/(?<size>\\d+|\\*)$",
		"u",
	).exec(t10);
	if (!e22 || !e22.groups) throw Error("Invalid Content-Range header");
	let { unit: r2, start: n22, end: i2, size: s2 } = e22.groups;
	return {
		unit: r2,
		start: Number(n22),
		end: Number(i2),
		size: "*" !== s2 ? Number(s2) : null,
	};
}
var t1 = class {
	read(t10, e22) {
		for (let r2 of this.chunks) {
			if (t10 < r2.start) break;
			if (t10 > r2.end) continue;
			if (t10 + e22 > r2.end) break;
			let n22 = t10 - r2.start,
				i2 = n22 + e22;
			return r2.data.slice(n22, i2);
		}
		throw Error("Missing data");
	}
	write(t10, e22) {
		let r2 = t10,
			n22 = r2 + e22.length,
			i2 = 0,
			s2 = this.chunks.length;
		for (; i2 < s2; i2++) {
			let t11 = this.chunks[i2];
			if ((b(t11, "Missing chunk"), !(r2 > t11.end))) {
				if (r2 > t11.start) {
					let n3 = r2 - t11.start,
						i3 = t11.data.subarray(0, n3);
					(e22 = t4(i3, e22)), (r2 = t11.start);
				}
				break;
			}
		}
		for (; s2 > i2; s2--) {
			let t11 = this.chunks[s2 - 1];
			if ((b(t11, "Missing chunk"), !(n22 < t11.start))) {
				if (n22 < t11.end) {
					let r3 = n22 - t11.start,
						i3 = t11.data.subarray(r3);
					(e22 = t4(e22, i3)), (n22 = t11.end);
				}
				break;
			}
		}
		let a22 = {
				start: r2,
				end: n22,
				data: e22,
			},
			o2 = s2 - i2;
		this.chunks.splice(i2, o2, a22);
	}
	constructor() {
		this.chunks = [];
	}
};
function t2(t10, e22) {
	var r2;
	let n22 = [];
	for (; t10.length > 0; ) {
		let i2 = null != (r2 = t3(t10, e22)) ? r2 : t10.length,
			s2 = t10.subarray(0, i2);
		n22.push(s2), (t10 = t10.subarray(i2 + e22.length));
	}
	return n22;
}
function t3(t10, e22) {
	for (let r2 = 0; r2 < t10.length - e22.length; r2++) {
		let n22 = t10.subarray(r2);
		if (t8(n22, e22)) return r2;
	}
}
function t6(t10, e22) {
	for (let r2 = t10.length - e22.length; r2 >= 0; r2--) {
		let n22 = t10.subarray(r2);
		if (t8(n22, e22)) return r2;
	}
}
function t8(t10, e22) {
	for (let r2 = 0; r2 < e22.length; r2++) if (t10[r2] !== e22[r2]) return false;
	return true;
}
function t4(t10, e22) {
	let r2 = t10.length + e22.length,
		n22 = new Uint8Array(r2);
	return n22.set(t10, 0), n22.set(e22, t10.length), n22;
}
function t5(t10) {
	b(t10.length > 0, "Must have at least one range");
	let e22 = [...t10].sort((t11, e32) => t11.from - e32.from),
		r2 = [];
	for (let t11 of e22) {
		let e32 = r2.length - 1,
			n3 = r2[e32];
		n3 && t11.from <= n3.to
			? (r2[e32] = {
					from: n3.from,
					to: Math.max(n3.to, t11.to),
				})
			: r2.push(t11);
	}
	let n22 = r2.map((t11) => `${t11.from}-${t11.to - 1}`);
	return `bytes=${n22.join(",")}`;
}
var t9 = class {
	static read(t10, e22) {
		let n22 = new t9(),
			i2 = t10.readUint32(),
			s2 = t10.readBuffer(i2),
			a22 = ty(new Uint8Array(s2), {
				dictionary: e22,
			}),
			o2 = new I(a22.buffer),
			u22 = o2.readUint16();
		for (let t11 = 0; t11 < u22; t11++) {
			let t12 = o2.readString(),
				e32 = r.read(o2);
			n22.setField(t12, e32);
		}
		return n22;
	}
	writeUncompressed(t10) {
		for (let [e22, n22] of (t10.writeUint16(this.fields.size), this.fields))
			t10.writeString(e22), r.write(t10, n22);
	}
	write(t10, e22) {
		let r2 = new tT();
		this.writeUncompressed(r2);
		let n22 = tv(r2.subarray(), {
			dictionary: e22,
		});
		t10.writeUint32(n22.byteLength), t10.writeBuffer(n22);
	}
	getData() {
		let t10 = {};
		for (let [e22, r2] of this.fields) t10[e22] = r2;
		return t10;
	}
	setField(t10, e22) {
		this.fields.set(t10, e22);
	}
	getField(t10) {
		return this.fields.get(t10);
	}
	constructor() {
		this.fields = /* @__PURE__ */ new Map();
	}
};
var et = class {
	scanItems() {
		return (
			null != this.itemsPromise ||
				(this.itemsPromise = fetch(this.url).then(async (t10) => {
					if (!t10.ok)
						throw Error(`Request failed: ${t10.status} ${t10.statusText}`);
					let e22 = await t10.arrayBuffer(),
						r2 = new I(e22),
						n22 = [],
						i2 = r2.readUint32();
					for (let t11 = 0; t11 < i2; t11++) {
						let t12 = r2.getOffset(),
							e32 = t9.read(r2, this.compressionDictionary),
							i3 = r2.getOffset() - t12,
							s2 = new tM(this.id, t12, i3),
							a22 = s2.toString(),
							o2 = {
								pointer: a22,
								data: e32.getData(),
							};
						this.itemLoader.prime(a22, o2), n22.push(o2);
					}
					return n22;
				})),
			this.itemsPromise
		);
	}
	resolveItem(t10) {
		return this.itemLoader.load(t10);
	}
	constructor(t10, e22, r2) {
		(this.id = t10),
			(this.url = e22),
			(this.compressionDictionary = r2),
			(this.itemLoader = new w.default(async (t11) => {
				let e32 = t11.map((t12) => {
						let e4 = tM.fromString(t12);
						return {
							from: e4.offset,
							to: e4.offset + e4.length,
						};
					}),
					r3 = await tX(this.url, e32);
				return r3.map((e4, r4) => {
					let n22 = new I(e4.buffer),
						i2 = t9.read(n22, this.compressionDictionary),
						s2 = t11[r4];
					return (
						b(s2, "Missing pointer"),
						{
							pointer: s2,
							data: i2.getData(),
						}
					);
				});
			}));
	}
};
var ee = class {
	async scanItems() {
		let t10 = await Promise.all(
			this.chunks.map(async (t11) => t11.scanItems()),
		);
		return t10.flat();
	}
	async resolveItems(t10) {
		return Promise.all(
			t10.map((t11) => {
				let e22 = tM.fromString(t11),
					r2 = this.chunks[e22.chunkId];
				return b(r2, "Missing chunk"), r2.resolveItem(t11);
			}),
		);
	}
	compareItems(t10, e22) {
		let r2 = tM.fromString(t10.pointer),
			n22 = tM.fromString(e22.pointer);
		return r2.compare(n22);
	}
	compareValues(t10, e22, n22) {
		return r.compare(t10, e22, n22);
	}
	constructor(t10) {
		(this.options = t10),
			(this.schema = this.options.schema),
			(this.indexes = this.options.indexes),
			(this.resolveRichText = this.options.resolveRichText);
		let e22 = new Uint8Array(this.options.compressionDictionary);
		this.chunks = this.options.chunks.map((t11, r2) => new et(r2, t11, e22));
	}
};

// /:https://framerusercontent.com/modules/fazkeHEM6pdbWdNiD6t1/oDxjJYtqXbLIPyiIlqvP/UAuNJVk60-1.js
var e2 = [];
async function resolveRichText(t10) {
	let i2 = e2[t10];
	if (i2) return await i2();
}

// /:https://framerusercontent.com/modules/fazkeHEM6pdbWdNiD6t1/oDxjJYtqXbLIPyiIlqvP/UAuNJVk60.js
var n2 = {
	id: {
		isNullable: false,
		type: t7.String,
	},
	K6sIsqXW4: {
		isNullable: true,
		type: t7.String,
	},
	kHpF3nLoI: {
		isNullable: true,
		type: t7.String,
	},
	o7Sggubxr: {
		isNullable: true,
		type: t7.String,
	},
	yZPDVnBTG: {
		isNullable: true,
		type: t7.Enum,
	},
};
var a2 = new l2();
var u2 = {
	collectionByLocaleId: {
		default: new ee({
			chunks: [
				new URL(
					"./UAuNJVk60-chunk-default-0.framercms",
					"https://framerusercontent.com/modules/fazkeHEM6pdbWdNiD6t1/oDxjJYtqXbLIPyiIlqvP/UAuNJVk60.js",
				).href,
			],
			compressionDictionary: [
				0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 79, 116, 104, 114, 52, 50,
				95, 114, 103, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114, 12,
				0, 0, 0, 35, 67, 97, 110, 32, 73, 32, 103, 101, 116, 32, 97, 32, 114,
				101, 102, 117, 110, 100, 32, 111, 110, 32, 109, 121, 32, 112, 117, 114,
				99, 104, 97, 115, 101, 63, 32, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110,
				76, 111, 73, 12, 0, 0, 0, 33, 99, 97, 110, 45, 105, 45, 103, 101, 116,
				45, 97, 45, 114, 101, 102, 117, 110, 100, 45, 111, 110, 45, 109, 121,
				45, 112, 117, 114, 99, 104, 97, 115, 101, 0, 0, 0, 9, 75, 54, 115, 73,
				115, 113, 88, 87, 52, 12, 0, 0, 0, 53, 85, 110, 102, 111, 114, 116, 117,
				110, 97, 116, 101, 108, 121, 44, 32, 97, 108, 108, 32, 116, 101, 109,
				112, 108, 97, 116, 101, 32, 115, 97, 108, 101, 115, 32, 97, 114, 101,
				32, 110, 111, 110, 45, 114, 101, 102, 117, 110, 100, 97, 98, 108, 101,
				46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 88,
				115, 78, 88, 65, 118, 107, 77, 105, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0,
				0, 0, 9, 81, 83, 52, 88, 98, 65, 86, 75, 66, 0, 0, 0, 9, 111, 55, 83,
				103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 49, 67, 97, 110, 32, 70, 114,
				97, 109, 101, 114, 105, 110, 103, 32, 116, 101, 97, 109, 32, 99, 117,
				115, 116, 111, 109, 105, 122, 101, 32, 116, 104, 101, 32, 119, 101, 98,
				115, 105, 116, 101, 32, 102, 111, 114, 32, 109, 101, 63, 32, 0, 0, 0, 9,
				107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0, 0, 0, 47, 99, 97, 110,
				45, 102, 114, 97, 109, 101, 114, 105, 110, 103, 45, 116, 101, 97, 109,
				45, 99, 117, 115, 116, 111, 109, 105, 122, 101, 45, 116, 104, 101, 45,
				119, 101, 98, 115, 105, 116, 101, 45, 102, 111, 114, 45, 109, 101, 0, 0,
				0, 9, 75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 207, 65, 98,
				115, 111, 108, 117, 116, 101, 108, 121, 33, 32, 87, 101, 32, 119, 111,
				117, 108, 100, 32, 108, 111, 118, 101, 32, 116, 111, 32, 99, 117, 115,
				116, 111, 109, 105, 122, 101, 32, 116, 104, 101, 32, 116, 101, 109, 112,
				108, 97, 116, 101, 32, 102, 111, 114, 32, 121, 111, 117, 114, 32, 98,
				114, 97, 110, 100, 32, 97, 110, 100, 32, 117, 115, 101, 32, 99, 97, 115,
				101, 46, 32, 69, 97, 99, 104, 32, 116, 101, 109, 112, 108, 97, 116, 101,
				32, 111, 102, 102, 101, 114, 115, 32, 97, 32, 68, 111, 110, 101, 45,
				102, 111, 114, 45, 121, 111, 117, 32, 108, 105, 99, 101, 110, 115, 101,
				32, 119, 104, 105, 99, 104, 32, 105, 110, 99, 108, 117, 100, 101, 115,
				32, 99, 117, 115, 116, 111, 109, 105, 122, 97, 116, 105, 111, 110, 32,
				111, 102, 32, 116, 104, 101, 32, 116, 101, 109, 112, 108, 97, 116, 101,
				44, 32, 51, 32, 110, 101, 119, 32, 100, 101, 115, 105, 103, 110, 115,
				44, 32, 97, 110, 100, 32, 83, 69, 79, 32, 111, 112, 116, 105, 109, 105,
				122, 97, 116, 105, 111, 110, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110,
				66, 84, 71, 5, 0, 0, 0, 9, 88, 115, 78, 88, 65, 118, 107, 77, 105, 0, 5,
				0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 71, 120, 119, 66, 57, 54, 71, 120,
				122, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114, 12, 0, 0, 0,
				46, 73, 115, 32, 116, 104, 101, 32, 70, 105, 103, 109, 97, 32, 102, 105,
				108, 101, 32, 105, 110, 99, 108, 117, 100, 101, 100, 32, 119, 105, 116,
				104, 32, 116, 104, 101, 32, 116, 101, 109, 112, 108, 97, 116, 101, 63,
				32, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0, 0, 0, 44,
				105, 115, 45, 116, 104, 101, 45, 102, 105, 103, 109, 97, 45, 102, 105,
				108, 101, 45, 105, 110, 99, 108, 117, 100, 101, 100, 45, 119, 105, 116,
				104, 45, 116, 104, 101, 45, 116, 101, 109, 112, 108, 97, 116, 101, 0, 0,
				0, 9, 75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 170, 78, 111,
				44, 32, 119, 101, 32, 100, 111, 110, 39, 116, 32, 112, 114, 111, 118,
				105, 100, 101, 32, 70, 105, 103, 109, 97, 32, 102, 105, 108, 101, 115,
				32, 119, 105, 116, 104, 32, 116, 104, 101, 32, 116, 101, 109, 112, 108,
				97, 116, 101, 115, 46, 32, 65, 108, 108, 32, 111, 102, 32, 111, 117,
				114, 32, 116, 101, 109, 112, 108, 97, 116, 101, 115, 32, 97, 114, 101,
				32, 100, 101, 115, 105, 103, 110, 101, 100, 32, 97, 110, 100, 32, 100,
				101, 118, 101, 108, 111, 112, 101, 100, 32, 100, 105, 114, 101, 99, 116,
				108, 121, 32, 119, 105, 116, 104, 105, 110, 32, 70, 114, 97, 109, 101,
				114, 46, 32, 87, 101, 32, 100, 111, 110, 39, 116, 32, 117, 115, 101, 32,
				70, 105, 103, 109, 97, 32, 100, 117, 114, 105, 110, 103, 32, 116, 104,
				101, 32, 100, 101, 115, 105, 103, 110, 32, 112, 114, 111, 99, 101, 115,
				115, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0,
				9, 88, 115, 78, 88, 65, 118, 107, 77, 105, 0, 5, 0, 0, 0, 2, 105, 100,
				12, 0, 0, 0, 9, 80, 50, 116, 97, 81, 95, 53, 84, 66, 0, 0, 0, 9, 111,
				55, 83, 103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 58, 68, 111, 32, 73,
				32, 110, 101, 101, 100, 32, 97, 110, 121, 32, 116, 101, 99, 104, 110,
				105, 99, 97, 108, 32, 115, 107, 105, 108, 108, 115, 32, 116, 111, 32,
				99, 117, 115, 116, 111, 109, 105, 122, 101, 32, 116, 104, 101, 32, 116,
				101, 109, 112, 108, 97, 116, 101, 63, 32, 0, 0, 0, 9, 107, 72, 112, 70,
				51, 110, 76, 111, 73, 12, 0, 0, 0, 56, 100, 111, 45, 105, 45, 110, 101,
				101, 100, 45, 97, 110, 121, 45, 116, 101, 99, 104, 110, 105, 99, 97,
				108, 45, 115, 107, 105, 108, 108, 115, 45, 116, 111, 45, 99, 117, 115,
				116, 111, 109, 105, 122, 101, 45, 116, 104, 101, 45, 116, 101, 109, 112,
				108, 97, 116, 101, 0, 0, 0, 9, 75, 54, 115, 73, 115, 113, 88, 87, 52,
				12, 0, 0, 0, 240, 78, 111, 44, 32, 70, 114, 97, 109, 101, 114, 32, 105,
				115, 32, 97, 32, 110, 111, 45, 99, 111, 100, 101, 32, 112, 108, 97, 116,
				102, 111, 114, 109, 32, 119, 104, 105, 99, 104, 32, 109, 97, 107, 101,
				115, 32, 105, 116, 32, 114, 101, 97, 108, 108, 121, 32, 101, 97, 115,
				121, 32, 116, 111, 32, 99, 117, 115, 116, 111, 109, 105, 122, 101, 32,
				119, 101, 98, 115, 105, 116, 101, 115, 32, 119, 105, 116, 104, 111, 117,
				116, 32, 119, 114, 105, 116, 105, 110, 103, 32, 97, 110, 121, 32, 99,
				111, 100, 101, 46, 32, 79, 117, 114, 32, 116, 101, 109, 112, 108, 97,
				116, 101, 115, 32, 97, 114, 101, 32, 101, 97, 115, 121, 45, 116, 111,
				45, 99, 117, 115, 116, 111, 109, 105, 122, 101, 32, 97, 110, 100, 32,
				97, 108, 108, 32, 116, 101, 109, 112, 108, 97, 116, 101, 115, 32, 99,
				111, 109, 101, 32, 119, 105, 116, 104, 32, 97, 32, 115, 101, 116, 32,
				111, 102, 32, 116, 117, 116, 111, 114, 105, 97, 108, 115, 32, 119, 104,
				105, 99, 104, 32, 109, 97, 107, 101, 32, 105, 115, 32, 114, 101, 97,
				108, 108, 121, 32, 101, 97, 115, 121, 32, 116, 111, 32, 99, 117, 115,
				116, 111, 109, 105, 122, 101, 32, 121, 111, 117, 114, 32, 115, 105, 116,
				101, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0,
				9, 88, 115, 78, 88, 65, 118, 107, 77, 105, 0, 5, 0, 0, 0, 2, 105, 100,
				12, 0, 0, 0, 9, 81, 55, 86, 107, 48, 49, 65, 51, 98, 0, 0, 0, 9, 111,
				55, 83, 103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 55, 68, 111, 32, 73,
				32, 110, 101, 101, 100, 32, 97, 32, 70, 114, 97, 109, 101, 114, 32, 115,
				117, 98, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 116, 111, 32,
				117, 115, 101, 32, 121, 111, 117, 114, 32, 116, 101, 109, 112, 108, 97,
				116, 101, 115, 63, 32, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111,
				73, 12, 0, 0, 0, 53, 100, 111, 45, 105, 45, 110, 101, 101, 100, 45, 97,
				45, 102, 114, 97, 109, 101, 114, 45, 115, 117, 98, 115, 99, 114, 105,
				112, 116, 105, 111, 110, 45, 116, 111, 45, 117, 115, 101, 45, 121, 111,
				117, 114, 45, 116, 101, 109, 112, 108, 97, 116, 101, 115, 0, 0, 0, 9,
				75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 1, 35, 78, 111, 44, 32,
				121, 111, 117, 32, 100, 111, 32, 110, 111, 116, 32, 110, 101, 101, 100,
				32, 97, 32, 70, 114, 97, 109, 101, 114, 32, 115, 117, 98, 115, 99, 114,
				105, 112, 116, 105, 111, 110, 32, 105, 110, 32, 111, 114, 100, 101, 114,
				32, 116, 111, 32, 117, 115, 101, 32, 70, 114, 97, 109, 101, 114, 32,
				116, 101, 109, 112, 108, 97, 116, 101, 115, 46, 32, 89, 111, 117, 32,
				99, 97, 110, 32, 112, 117, 98, 108, 105, 115, 104, 32, 121, 111, 117,
				114, 32, 115, 105, 116, 101, 32, 117, 115, 105, 110, 103, 32, 70, 114,
				97, 109, 101, 114, 39, 115, 32, 102, 114, 101, 101, 32, 100, 111, 109,
				97, 105, 110, 115, 46, 32, 32, 73, 102, 32, 121, 111, 117, 32, 119, 97,
				110, 116, 32, 116, 111, 32, 99, 111, 110, 110, 101, 99, 116, 32, 121,
				111, 117, 114, 32, 119, 101, 98, 115, 105, 116, 101, 32, 116, 111, 32,
				97, 32, 99, 117, 115, 116, 111, 109, 32, 100, 111, 109, 97, 105, 110,
				32, 116, 104, 101, 110, 32, 121, 111, 117, 32, 119, 111, 117, 108, 100,
				32, 110, 101, 101, 100, 32, 116, 111, 32, 112, 117, 114, 99, 104, 97,
				115, 101, 32, 97, 32, 70, 114, 97, 109, 101, 114, 32, 115, 117, 98, 115,
				99, 114, 105, 112, 116, 105, 111, 110, 32, 112, 108, 97, 110, 32, 119,
				104, 105, 99, 104, 32, 115, 116, 97, 114, 116, 115, 32, 97, 116, 32, 36,
				53, 47, 109, 111, 110, 116, 104, 32, 119, 105, 116, 104, 32, 97, 110,
				32, 97, 110, 110, 117, 97, 108, 32, 112, 108, 97, 110, 46, 0, 0, 0, 9,
				121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 88, 115, 78, 88,
				65, 118, 107, 77, 105, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 104,
				79, 83, 90, 50, 112, 85, 78, 113, 0, 0, 0, 9, 111, 55, 83, 103, 103,
				117, 98, 120, 114, 12, 0, 0, 0, 41, 87, 104, 97, 116, 32, 105, 115, 32,
				105, 110, 99, 108, 117, 100, 101, 100, 32, 105, 110, 32, 116, 104, 101,
				32, 70, 114, 97, 109, 101, 114, 32, 116, 101, 109, 112, 108, 97, 116,
				101, 63, 32, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0,
				0, 0, 39, 119, 104, 97, 116, 45, 105, 115, 45, 105, 110, 99, 108, 117,
				100, 101, 100, 45, 105, 110, 45, 116, 104, 101, 45, 102, 114, 97, 109,
				101, 114, 45, 116, 101, 109, 112, 108, 97, 116, 101, 0, 0, 0, 9, 75, 54,
				115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 1, 173, 69, 97, 99, 104, 32,
				116, 101, 109, 112, 108, 97, 116, 101, 32, 99, 111, 109, 101, 115, 32,
				119, 105, 116, 104, 32, 97, 32, 117, 110, 105, 113, 117, 101, 32, 115,
				101, 116, 32, 111, 102, 32, 112, 97, 103, 101, 115, 44, 32, 99, 111,
				109, 112, 111, 110, 101, 110, 116, 115, 44, 32, 102, 111, 110, 116, 32,
				115, 116, 121, 108, 101, 115, 44, 32, 99, 111, 108, 111, 114, 32, 115,
				116, 121, 108, 101, 115, 44, 32, 97, 110, 100, 32, 67, 77, 83, 32, 99,
				111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 32, 102, 111, 114, 32,
				101, 97, 115, 121, 32, 101, 100, 105, 116, 105, 110, 103, 46, 32, 84,
				104, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 112, 97,
				103, 101, 115, 32, 97, 110, 100, 32, 67, 77, 83, 32, 99, 111, 108, 108,
				101, 99, 116, 105, 111, 110, 115, 32, 119, 105, 108, 108, 32, 98, 101,
				32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 105, 110, 32, 116,
				104, 101, 32, 116, 101, 109, 112, 108, 97, 116, 101, 32, 112, 97, 103,
				101, 46, 32, 79, 117, 114, 32, 116, 101, 109, 112, 108, 97, 116, 101,
				115, 32, 97, 114, 101, 32, 100, 101, 115, 105, 103, 110, 101, 100, 32,
				97, 110, 100, 32, 98, 117, 105, 108, 116, 32, 115, 116, 114, 97, 105,
				103, 104, 116, 32, 119, 105, 116, 104, 105, 110, 32, 70, 114, 97, 109,
				101, 114, 32, 97, 110, 100, 32, 119, 101, 32, 100, 111, 32, 110, 111,
				116, 32, 112, 114, 111, 118, 105, 100, 101, 32, 70, 105, 103, 109, 97,
				32, 102, 105, 108, 101, 115, 32, 119, 105, 116, 104, 32, 116, 104, 101,
				32, 116, 101, 109, 112, 108, 97, 116, 101, 46, 32, 32, 87, 101, 32, 97,
				108, 115, 111, 32, 112, 114, 111, 118, 105, 100, 101, 32, 97, 32, 115,
				101, 116, 32, 111, 102, 32, 103, 101, 110, 101, 114, 97, 108, 32, 97,
				110, 100, 32, 116, 101, 109, 112, 108, 97, 116, 101, 45, 115, 112, 101,
				99, 105, 102, 105, 99, 32, 116, 117, 116, 111, 114, 105, 97, 108, 115,
				32, 102, 111, 114, 32, 111, 117, 114, 32, 99, 117, 115, 116, 111, 109,
				101, 114, 115, 32, 116, 111, 32, 104, 101, 108, 112, 32, 119, 105, 116,
				104, 32, 99, 117, 115, 116, 111, 109, 105, 122, 97, 116, 105, 111, 110,
				46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 88,
				115, 78, 88, 65, 118, 107, 77, 105, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0,
				0, 0, 9, 113, 114, 103, 68, 109, 65, 106, 90, 65, 0, 0, 0, 9, 111, 55,
				83, 103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 52, 87, 104, 97, 116, 32,
				107, 105, 110, 100, 32, 111, 102, 32, 116, 101, 99, 104, 110, 105, 99,
				97, 108, 32, 115, 117, 112, 112, 111, 114, 116, 32, 100, 111, 101, 115,
				32, 65, 112, 105, 70, 108, 111, 119, 32, 112, 114, 111, 118, 105, 100,
				101, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0, 0,
				0, 51, 119, 104, 97, 116, 45, 107, 105, 110, 100, 45, 111, 102, 45, 116,
				101, 99, 104, 110, 105, 99, 97, 108, 45, 115, 117, 112, 112, 111, 114,
				116, 45, 100, 111, 101, 115, 45, 97, 112, 105, 102, 108, 111, 119, 45,
				112, 114, 111, 118, 105, 100, 101, 0, 0, 0, 9, 75, 54, 115, 73, 115,
				113, 88, 87, 52, 12, 0, 0, 0, 175, 65, 112, 105, 70, 108, 111, 119, 32,
				111, 102, 102, 101, 114, 115, 32, 99, 111, 109, 112, 114, 101, 104, 101,
				110, 115, 105, 118, 101, 32, 116, 101, 99, 104, 110, 105, 99, 97, 108,
				32, 115, 117, 112, 112, 111, 114, 116, 32, 116, 104, 114, 111, 117, 103,
				104, 32, 118, 97, 114, 105, 111, 117, 115, 32, 99, 104, 97, 110, 110,
				101, 108, 115, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32,
				101, 109, 97, 105, 108, 44, 32, 108, 105, 118, 101, 32, 99, 104, 97,
				116, 44, 32, 97, 110, 100, 32, 97, 32, 107, 110, 111, 119, 108, 101,
				100, 103, 101, 32, 98, 97, 115, 101, 46, 32, 69, 110, 116, 101, 114,
				112, 114, 105, 115, 101, 32, 99, 117, 115, 116, 111, 109, 101, 114, 115,
				32, 97, 108, 115, 111, 32, 114, 101, 99, 101, 105, 118, 101, 32, 100,
				101, 100, 105, 99, 97, 116, 101, 100, 32, 115, 117, 112, 112, 111, 114,
				116, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0,
				9, 121, 65, 65, 71, 68, 121, 69, 51, 81, 0, 5, 0, 0, 0, 2, 105, 100, 12,
				0, 0, 0, 9, 72, 102, 79, 119, 65, 67, 77, 56, 56, 0, 0, 0, 9, 111, 55,
				83, 103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 32, 73, 115, 32, 116, 104,
				101, 114, 101, 32, 50, 52, 47, 55, 32, 115, 117, 112, 112, 111, 114,
				116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 63, 0, 0, 0, 9, 107,
				72, 112, 70, 51, 110, 76, 111, 73, 12, 0, 0, 0, 31, 105, 115, 45, 116,
				104, 101, 114, 101, 45, 50, 52, 45, 55, 45, 115, 117, 112, 112, 111,
				114, 116, 45, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 0, 0, 9, 75,
				54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 152, 87, 104, 105, 108,
				101, 32, 111, 117, 114, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32,
				115, 117, 112, 112, 111, 114, 116, 32, 104, 111, 117, 114, 115, 32, 97,
				114, 101, 32, 98, 117, 115, 105, 110, 101, 115, 115, 32, 104, 111, 117,
				114, 115, 32, 105, 110, 32, 109, 97, 106, 111, 114, 32, 116, 105, 109,
				101, 32, 122, 111, 110, 101, 115, 44, 32, 69, 110, 116, 101, 114, 112,
				114, 105, 115, 101, 32, 99, 117, 115, 116, 111, 109, 101, 114, 115, 32,
				104, 97, 118, 101, 32, 97, 99, 99, 101, 115, 115, 32, 116, 111, 32, 50,
				52, 47, 55, 32, 101, 109, 101, 114, 103, 101, 110, 99, 121, 32, 115,
				117, 112, 112, 111, 114, 116, 32, 102, 111, 114, 32, 99, 114, 105, 116,
				105, 99, 97, 108, 32, 105, 115, 115, 117, 101, 115, 46, 0, 0, 0, 9, 121,
				90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 121, 65, 65, 71, 68,
				121, 69, 51, 81, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 75, 108,
				106, 120, 111, 106, 109, 104, 73, 0, 0, 0, 9, 111, 55, 83, 103, 103,
				117, 98, 120, 114, 12, 0, 0, 0, 57, 72, 111, 119, 32, 113, 117, 105, 99,
				107, 108, 121, 32, 99, 97, 110, 32, 73, 32, 101, 120, 112, 101, 99, 116,
				32, 97, 32, 114, 101, 115, 112, 111, 110, 115, 101, 32, 116, 111, 32,
				109, 121, 32, 115, 117, 112, 112, 111, 114, 116, 32, 116, 105, 99, 107,
				101, 116, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0,
				0, 0, 56, 104, 111, 119, 45, 113, 117, 105, 99, 107, 108, 121, 45, 99,
				97, 110, 45, 105, 45, 101, 120, 112, 101, 99, 116, 45, 97, 45, 114, 101,
				115, 112, 111, 110, 115, 101, 45, 116, 111, 45, 109, 121, 45, 115, 117,
				112, 112, 111, 114, 116, 45, 116, 105, 99, 107, 101, 116, 0, 0, 0, 9,
				75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 138, 79, 117, 114,
				32, 116, 101, 97, 109, 32, 97, 105, 109, 115, 32, 116, 111, 32, 114,
				101, 115, 112, 111, 110, 100, 32, 116, 111, 32, 97, 108, 108, 32, 115,
				117, 112, 112, 111, 114, 116, 32, 116, 105, 99, 107, 101, 116, 115, 32,
				119, 105, 116, 104, 105, 110, 32, 50, 52, 32, 104, 111, 117, 114, 115,
				46, 32, 69, 110, 116, 101, 114, 112, 114, 105, 115, 101, 32, 99, 117,
				115, 116, 111, 109, 101, 114, 115, 32, 114, 101, 99, 101, 105, 118, 101,
				32, 112, 114, 105, 111, 114, 105, 116, 121, 32, 115, 117, 112, 112, 111,
				114, 116, 32, 119, 105, 116, 104, 32, 102, 97, 115, 116, 101, 114, 32,
				114, 101, 115, 112, 111, 110, 115, 101, 32, 116, 105, 109, 101, 115, 46,
				0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 121,
				65, 65, 71, 68, 121, 69, 51, 81, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0,
				0, 9, 77, 111, 103, 86, 111, 99, 65, 54, 87, 0, 0, 0, 9, 111, 55, 83,
				103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 37, 68, 111, 32, 121, 111,
				117, 32, 111, 102, 102, 101, 114, 32, 100, 101, 118, 101, 108, 111, 112,
				101, 114, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116, 105, 111,
				110, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0, 0,
				0, 36, 100, 111, 45, 121, 111, 117, 45, 111, 102, 102, 101, 114, 45,
				100, 101, 118, 101, 108, 111, 112, 101, 114, 45, 100, 111, 99, 117, 109,
				101, 110, 116, 97, 116, 105, 111, 110, 0, 0, 0, 9, 75, 54, 115, 73, 115,
				113, 88, 87, 52, 12, 0, 0, 0, 170, 89, 101, 115, 44, 32, 65, 112, 105,
				70, 108, 111, 119, 32, 112, 114, 111, 118, 105, 100, 101, 115, 32, 101,
				120, 116, 101, 110, 115, 105, 118, 101, 32, 100, 101, 118, 101, 108,
				111, 112, 101, 114, 32, 100, 111, 99, 117, 109, 101, 110, 116, 97, 116,
				105, 111, 110, 44, 32, 105, 110, 99, 108, 117, 100, 105, 110, 103, 32,
				65, 80, 73, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 115, 44, 32,
				105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 32, 103, 117, 105,
				100, 101, 115, 44, 32, 97, 110, 100, 32, 99, 111, 100, 101, 32, 115, 97,
				109, 112, 108, 101, 115, 32, 116, 111, 32, 104, 101, 108, 112, 32, 121,
				111, 117, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 32, 97, 110,
				100, 32, 117, 115, 101, 32, 111, 117, 114, 32, 65, 80, 73, 32, 101, 102,
				102, 101, 99, 116, 105, 118, 101, 108, 121, 46, 0, 0, 0, 9, 121, 90, 80,
				68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 121, 65, 65, 71, 68, 121, 69,
				51, 81, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 75, 112, 65, 98, 79,
				90, 122, 71, 118, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114,
				12, 0, 0, 0, 51, 67, 97, 110, 32, 73, 32, 103, 101, 116, 32, 104, 101,
				108, 112, 32, 119, 105, 116, 104, 32, 105, 110, 116, 101, 103, 114, 97,
				116, 105, 111, 110, 32, 97, 110, 100, 32, 105, 109, 112, 108, 101, 109,
				101, 110, 116, 97, 116, 105, 111, 110, 63, 0, 0, 0, 9, 107, 72, 112, 70,
				51, 110, 76, 111, 73, 12, 0, 0, 0, 50, 99, 97, 110, 45, 105, 45, 103,
				101, 116, 45, 104, 101, 108, 112, 45, 119, 105, 116, 104, 45, 105, 110,
				116, 101, 103, 114, 97, 116, 105, 111, 110, 45, 97, 110, 100, 45, 105,
				109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 0, 0, 0,
				9, 75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 158, 65, 98, 115,
				111, 108, 117, 116, 101, 108, 121, 46, 32, 79, 117, 114, 32, 116, 101,
				99, 104, 110, 105, 99, 97, 108, 32, 115, 117, 112, 112, 111, 114, 116,
				32, 116, 101, 97, 109, 32, 99, 97, 110, 32, 97, 115, 115, 105, 115, 116,
				32, 119, 105, 116, 104, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105,
				111, 110, 32, 113, 117, 101, 115, 116, 105, 111, 110, 115, 32, 97, 110,
				100, 32, 112, 114, 111, 118, 105, 100, 101, 32, 103, 117, 105, 100, 97,
				110, 99, 101, 32, 111, 110, 32, 98, 101, 115, 116, 32, 112, 114, 97, 99,
				116, 105, 99, 101, 115, 32, 102, 111, 114, 32, 105, 109, 112, 108, 101,
				109, 101, 110, 116, 105, 110, 103, 32, 65, 112, 105, 70, 108, 111, 119,
				32, 105, 110, 32, 121, 111, 117, 114, 32, 112, 114, 111, 106, 101, 99,
				116, 115, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0,
				0, 9, 121, 65, 65, 71, 68, 121, 69, 51, 81, 0, 5, 0, 0, 0, 2, 105, 100,
				12, 0, 0, 0, 9, 110, 110, 85, 98, 99, 50, 118, 101, 89, 0, 0, 0, 9, 111,
				55, 83, 103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 45, 73, 115, 32, 116,
				104, 101, 114, 101, 32, 97, 32, 99, 111, 109, 109, 117, 110, 105, 116,
				121, 32, 102, 111, 114, 117, 109, 32, 102, 111, 114, 32, 65, 112, 105,
				70, 108, 111, 119, 32, 117, 115, 101, 114, 115, 63, 0, 0, 0, 9, 107, 72,
				112, 70, 51, 110, 76, 111, 73, 12, 0, 0, 0, 44, 105, 115, 45, 116, 104,
				101, 114, 101, 45, 97, 45, 99, 111, 109, 109, 117, 110, 105, 116, 121,
				45, 102, 111, 114, 117, 109, 45, 102, 111, 114, 45, 97, 112, 105, 102,
				108, 111, 119, 45, 117, 115, 101, 114, 115, 0, 0, 0, 9, 75, 54, 115, 73,
				115, 113, 88, 87, 52, 12, 0, 0, 0, 149, 89, 101, 115, 44, 32, 119, 101,
				32, 109, 97, 105, 110, 116, 97, 105, 110, 32, 97, 110, 32, 97, 99, 116,
				105, 118, 101, 32, 99, 111, 109, 109, 117, 110, 105, 116, 121, 32, 102,
				111, 114, 117, 109, 32, 119, 104, 101, 114, 101, 32, 117, 115, 101, 114,
				115, 32, 99, 97, 110, 32, 115, 104, 97, 114, 101, 32, 101, 120, 112,
				101, 114, 105, 101, 110, 99, 101, 115, 44, 32, 97, 115, 107, 32, 113,
				117, 101, 115, 116, 105, 111, 110, 115, 44, 32, 97, 110, 100, 32, 103,
				101, 116, 32, 104, 101, 108, 112, 32, 102, 114, 111, 109, 32, 98, 111,
				116, 104, 32, 116, 104, 101, 32, 65, 112, 105, 70, 108, 111, 119, 32,
				116, 101, 97, 109, 32, 97, 110, 100, 32, 111, 116, 104, 101, 114, 32,
				117, 115, 101, 114, 115, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66,
				84, 71, 5, 0, 0, 0, 9, 121, 65, 65, 71, 68, 121, 69, 51, 81, 0, 5, 0, 0,
				0, 2, 105, 100, 12, 0, 0, 0, 9, 103, 70, 56, 114, 67, 105, 101, 77, 86,
				0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 34,
				72, 111, 119, 32, 100, 111, 32, 73, 32, 103, 101, 116, 32, 115, 116, 97,
				114, 116, 101, 100, 32, 119, 105, 116, 104, 32, 65, 112, 105, 70, 108,
				111, 119, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0,
				0, 0, 33, 104, 111, 119, 45, 100, 111, 45, 105, 45, 103, 101, 116, 45,
				115, 116, 97, 114, 116, 101, 100, 45, 119, 105, 116, 104, 45, 97, 112,
				105, 102, 108, 111, 119, 0, 0, 0, 9, 75, 54, 115, 73, 115, 113, 88, 87,
				52, 12, 0, 0, 0, 159, 89, 111, 117, 32, 99, 97, 110, 32, 115, 116, 97,
				114, 116, 32, 98, 121, 32, 115, 105, 103, 110, 105, 110, 103, 32, 117,
				112, 32, 102, 111, 114, 32, 97, 32, 102, 114, 101, 101, 32, 49, 52, 45,
				100, 97, 121, 32, 116, 114, 105, 97, 108, 32, 111, 110, 32, 111, 117,
				114, 32, 119, 101, 98, 115, 105, 116, 101, 46, 32, 84, 104, 105, 115,
				32, 97, 108, 108, 111, 119, 115, 32, 121, 111, 117, 32, 116, 111, 32,
				101, 120, 112, 108, 111, 114, 101, 32, 116, 104, 101, 32, 112, 108, 97,
				116, 102, 111, 114, 109, 32, 97, 110, 100, 32, 105, 116, 115, 32, 102,
				101, 97, 116, 117, 114, 101, 115, 32, 98, 101, 102, 111, 114, 101, 32,
				109, 97, 107, 105, 110, 103, 32, 97, 32, 112, 117, 114, 99, 104, 97,
				115, 101, 32, 100, 101, 99, 105, 115, 105, 111, 110, 46, 0, 0, 0, 9,
				121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 115, 71, 82, 76,
				79, 48, 72, 87, 69, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 78, 114,
				48, 88, 52, 105, 55, 80, 120, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117,
				98, 120, 114, 12, 0, 0, 0, 58, 67, 97, 110, 32, 73, 32, 115, 112, 101,
				97, 107, 32, 119, 105, 116, 104, 32, 97, 32, 115, 97, 108, 101, 115, 32,
				114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 116, 105, 118, 101, 32,
				98, 101, 102, 111, 114, 101, 32, 112, 117, 114, 99, 104, 97, 115, 105,
				110, 103, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0,
				0, 0, 57, 99, 97, 110, 45, 105, 45, 115, 112, 101, 97, 107, 45, 119,
				105, 116, 104, 45, 97, 45, 115, 97, 108, 101, 115, 45, 114, 101, 112,
				114, 101, 115, 101, 110, 116, 97, 116, 105, 118, 101, 45, 98, 101, 102,
				111, 114, 101, 45, 112, 117, 114, 99, 104, 97, 115, 105, 110, 103, 0, 0,
				0, 9, 75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 160, 89, 101,
				115, 44, 32, 111, 117, 114, 32, 115, 97, 108, 101, 115, 32, 116, 101,
				97, 109, 32, 105, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32,
				102, 111, 114, 32, 99, 111, 110, 115, 117, 108, 116, 97, 116, 105, 111,
				110, 115, 46, 32, 89, 111, 117, 32, 99, 97, 110, 32, 115, 99, 104, 101,
				100, 117, 108, 101, 32, 97, 32, 99, 97, 108, 108, 32, 111, 114, 32, 100,
				101, 109, 111, 32, 116, 104, 114, 111, 117, 103, 104, 32, 111, 117, 114,
				32, 119, 101, 98, 115, 105, 116, 101, 32, 116, 111, 32, 100, 105, 115,
				99, 117, 115, 115, 32, 121, 111, 117, 114, 32, 115, 112, 101, 99, 105,
				102, 105, 99, 32, 110, 101, 101, 100, 115, 32, 97, 110, 100, 32, 104,
				111, 119, 32, 65, 112, 105, 70, 108, 111, 119, 32, 99, 97, 110, 32, 104,
				101, 108, 112, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5,
				0, 0, 0, 9, 115, 71, 82, 76, 79, 48, 72, 87, 69, 0, 5, 0, 0, 0, 2, 105,
				100, 12, 0, 0, 0, 9, 121, 57, 81, 99, 48, 103, 122, 97, 86, 0, 0, 0, 9,
				111, 55, 83, 103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 58, 87, 104, 97,
				116, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 100,
				111, 32, 73, 32, 110, 101, 101, 100, 32, 116, 111, 32, 112, 114, 111,
				118, 105, 100, 101, 32, 116, 111, 32, 112, 117, 114, 99, 104, 97, 115,
				101, 32, 65, 112, 105, 70, 108, 111, 119, 63, 0, 0, 0, 9, 107, 72, 112,
				70, 51, 110, 76, 111, 73, 12, 0, 0, 0, 57, 119, 104, 97, 116, 45, 105,
				110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 45, 100, 111, 45, 105,
				45, 110, 101, 101, 100, 45, 116, 111, 45, 112, 114, 111, 118, 105, 100,
				101, 45, 116, 111, 45, 112, 117, 114, 99, 104, 97, 115, 101, 45, 97,
				112, 105, 102, 108, 111, 119, 0, 0, 0, 9, 75, 54, 115, 73, 115, 113, 88,
				87, 52, 12, 0, 0, 0, 172, 84, 111, 32, 112, 117, 114, 99, 104, 97, 115,
				101, 32, 65, 112, 105, 70, 108, 111, 119, 44, 32, 121, 111, 117, 39,
				108, 108, 32, 110, 101, 101, 100, 32, 116, 111, 32, 112, 114, 111, 118,
				105, 100, 101, 32, 98, 97, 115, 105, 99, 32, 99, 111, 109, 112, 97, 110,
				121, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 44, 32,
				99, 104, 111, 111, 115, 101, 32, 97, 32, 112, 108, 97, 110, 44, 32, 97,
				110, 100, 32, 115, 101, 116, 32, 117, 112, 32, 97, 32, 112, 97, 121,
				109, 101, 110, 116, 32, 109, 101, 116, 104, 111, 100, 46, 32, 70, 111,
				114, 32, 69, 110, 116, 101, 114, 112, 114, 105, 115, 101, 32, 112, 108,
				97, 110, 115, 44, 32, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108,
				32, 100, 101, 116, 97, 105, 108, 115, 32, 109, 97, 121, 32, 98, 101, 32,
				114, 101, 113, 117, 105, 114, 101, 100, 46, 0, 0, 0, 9, 121, 90, 80, 68,
				86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 115, 71, 82, 76, 79, 48, 72, 87, 69,
				0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 78, 110, 113, 69, 85, 106,
				76, 77, 89, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114, 12, 0,
				0, 0, 43, 65, 114, 101, 32, 116, 104, 101, 114, 101, 32, 97, 110, 121,
				32, 108, 111, 110, 103, 45, 116, 101, 114, 109, 32, 99, 111, 110, 116,
				114, 97, 99, 116, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 63,
				0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0, 0, 0, 42, 97,
				114, 101, 45, 116, 104, 101, 114, 101, 45, 97, 110, 121, 45, 108, 111,
				110, 103, 45, 116, 101, 114, 109, 45, 99, 111, 110, 116, 114, 97, 99,
				116, 115, 45, 114, 101, 113, 117, 105, 114, 101, 100, 0, 0, 0, 9, 75,
				54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 134, 79, 117, 114, 32,
				83, 116, 97, 114, 116, 101, 114, 32, 97, 110, 100, 32, 80, 114, 111, 32,
				112, 108, 97, 110, 115, 32, 97, 114, 101, 32, 98, 105, 108, 108, 101,
				100, 32, 109, 111, 110, 116, 104, 108, 121, 32, 119, 105, 116, 104, 32,
				110, 111, 32, 108, 111, 110, 103, 45, 116, 101, 114, 109, 32, 99, 111,
				109, 109, 105, 116, 109, 101, 110, 116, 46, 32, 69, 110, 116, 101, 114,
				112, 114, 105, 115, 101, 32, 112, 108, 97, 110, 115, 32, 109, 97, 121,
				32, 104, 97, 118, 101, 32, 99, 117, 115, 116, 111, 109, 32, 116, 101,
				114, 109, 115, 32, 98, 97, 115, 101, 100, 32, 111, 110, 32, 121, 111,
				117, 114, 32, 110, 101, 101, 100, 115, 46, 0, 0, 0, 9, 121, 90, 80, 68,
				86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 115, 71, 82, 76, 79, 48, 72, 87, 69,
				0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 87, 73, 81, 109, 77, 57, 90,
				97, 76, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114, 12, 0, 0,
				0, 51, 67, 97, 110, 32, 73, 32, 99, 117, 115, 116, 111, 109, 105, 122,
				101, 32, 109, 121, 32, 112, 108, 97, 110, 32, 98, 97, 115, 101, 100, 32,
				111, 110, 32, 109, 121, 32, 115, 112, 101, 99, 105, 102, 105, 99, 32,
				110, 101, 101, 100, 115, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76,
				111, 73, 12, 0, 0, 0, 50, 99, 97, 110, 45, 105, 45, 99, 117, 115, 116,
				111, 109, 105, 122, 101, 45, 109, 121, 45, 112, 108, 97, 110, 45, 98,
				97, 115, 101, 100, 45, 111, 110, 45, 109, 121, 45, 115, 112, 101, 99,
				105, 102, 105, 99, 45, 110, 101, 101, 100, 115, 0, 0, 0, 9, 75, 54, 115,
				73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 166, 87, 104, 105, 108, 101, 32,
				111, 117, 114, 32, 83, 116, 97, 114, 116, 101, 114, 32, 97, 110, 100,
				32, 80, 114, 111, 32, 112, 108, 97, 110, 115, 32, 104, 97, 118, 101, 32,
				102, 105, 120, 101, 100, 32, 102, 101, 97, 116, 117, 114, 101, 115, 44,
				32, 111, 117, 114, 32, 69, 110, 116, 101, 114, 112, 114, 105, 115, 101,
				32, 112, 108, 97, 110, 32, 111, 102, 102, 101, 114, 115, 32, 99, 117,
				115, 116, 111, 109, 105, 122, 97, 116, 105, 111, 110, 32, 111, 112, 116,
				105, 111, 110, 115, 46, 32, 79, 117, 114, 32, 115, 97, 108, 101, 115,
				32, 116, 101, 97, 109, 32, 99, 97, 110, 32, 119, 111, 114, 107, 32, 119,
				105, 116, 104, 32, 121, 111, 117, 32, 116, 111, 32, 99, 114, 101, 97,
				116, 101, 32, 97, 32, 116, 97, 105, 108, 111, 114, 101, 100, 32, 115,
				111, 108, 117, 116, 105, 111, 110, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86,
				110, 66, 84, 71, 5, 0, 0, 0, 9, 115, 71, 82, 76, 79, 48, 72, 87, 69, 0,
				5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 79, 70, 121, 84, 98, 95, 120,
				52, 79, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114, 12, 0, 0,
				0, 35, 87, 104, 97, 116, 32, 112, 97, 121, 109, 101, 110, 116, 32, 109,
				101, 116, 104, 111, 100, 115, 32, 100, 111, 32, 121, 111, 117, 32, 97,
				99, 99, 101, 112, 116, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76,
				111, 73, 12, 0, 0, 0, 34, 119, 104, 97, 116, 45, 112, 97, 121, 109, 101,
				110, 116, 45, 109, 101, 116, 104, 111, 100, 115, 45, 100, 111, 45, 121,
				111, 117, 45, 97, 99, 99, 101, 112, 116, 0, 0, 0, 9, 75, 54, 115, 73,
				115, 113, 88, 87, 52, 12, 0, 0, 0, 171, 65, 112, 105, 70, 108, 111, 119,
				32, 97, 99, 99, 101, 112, 116, 115, 32, 109, 97, 106, 111, 114, 32, 99,
				114, 101, 100, 105, 116, 32, 99, 97, 114, 100, 115, 32, 102, 111, 114,
				32, 83, 116, 97, 114, 116, 101, 114, 32, 97, 110, 100, 32, 80, 114, 111,
				32, 112, 108, 97, 110, 115, 46, 32, 70, 111, 114, 32, 69, 110, 116, 101,
				114, 112, 114, 105, 115, 101, 32, 112, 108, 97, 110, 115, 44, 32, 119,
				101, 32, 97, 108, 115, 111, 32, 111, 102, 102, 101, 114, 32, 105, 110,
				118, 111, 105, 99, 105, 110, 103, 32, 97, 110, 100, 32, 111, 116, 104,
				101, 114, 32, 112, 97, 121, 109, 101, 110, 116, 32, 111, 112, 116, 105,
				111, 110, 115, 32, 98, 97, 115, 101, 100, 32, 111, 110, 32, 121, 111,
				117, 114, 32, 99, 111, 109, 112, 97, 110, 121, 39, 115, 32, 114, 101,
				113, 117, 105, 114, 101, 109, 101, 110, 116, 115, 46, 0, 0, 0, 9, 121,
				90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 115, 71, 82, 76, 79, 48,
				72, 87, 69, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 77, 87, 57, 118,
				122, 66, 100, 56, 73, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120,
				114, 12, 0, 0, 0, 38, 87, 104, 97, 116, 32, 112, 114, 105, 99, 105, 110,
				103, 32, 112, 108, 97, 110, 115, 32, 100, 111, 101, 115, 32, 65, 112,
				105, 70, 108, 111, 119, 32, 111, 102, 102, 101, 114, 63, 0, 0, 0, 9,
				107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0, 0, 0, 37, 119, 104, 97,
				116, 45, 112, 114, 105, 99, 105, 110, 103, 45, 112, 108, 97, 110, 115,
				45, 100, 111, 101, 115, 45, 97, 112, 105, 102, 108, 111, 119, 45, 111,
				102, 102, 101, 114, 0, 0, 0, 9, 75, 54, 115, 73, 115, 113, 88, 87, 52,
				12, 0, 0, 0, 147, 65, 112, 105, 70, 108, 111, 119, 32, 111, 102, 102,
				101, 114, 115, 32, 116, 104, 114, 101, 101, 32, 109, 97, 105, 110, 32,
				112, 114, 105, 99, 105, 110, 103, 32, 116, 105, 101, 114, 115, 58, 32,
				83, 116, 97, 114, 116, 101, 114, 44, 32, 80, 114, 111, 44, 32, 97, 110,
				100, 32, 69, 110, 116, 101, 114, 112, 114, 105, 115, 101, 46, 32, 69,
				97, 99, 104, 32, 112, 108, 97, 110, 32, 105, 115, 32, 100, 101, 115,
				105, 103, 110, 101, 100, 32, 116, 111, 32, 99, 97, 116, 101, 114, 32,
				116, 111, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 98, 117,
				115, 105, 110, 101, 115, 115, 32, 110, 101, 101, 100, 115, 32, 97, 110,
				100, 32, 117, 115, 97, 103, 101, 32, 108, 101, 118, 101, 108, 115, 46,
				0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 89,
				114, 66, 50, 73, 117, 53, 103, 121, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0,
				0, 0, 9, 115, 68, 99, 53, 49, 57, 55, 86, 95, 0, 0, 0, 9, 111, 55, 83,
				103, 103, 117, 98, 120, 114, 12, 0, 0, 0, 44, 73, 115, 32, 116, 104,
				101, 114, 101, 32, 97, 32, 102, 114, 101, 101, 32, 116, 114, 105, 97,
				108, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 102, 111, 114, 32,
				65, 112, 105, 70, 108, 111, 119, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51,
				110, 76, 111, 73, 12, 0, 0, 0, 43, 105, 115, 45, 116, 104, 101, 114,
				101, 45, 97, 45, 102, 114, 101, 101, 45, 116, 114, 105, 97, 108, 45, 97,
				118, 97, 105, 108, 97, 98, 108, 101, 45, 102, 111, 114, 45, 97, 112,
				105, 102, 108, 111, 119, 0, 0, 0, 9, 75, 54, 115, 73, 115, 113, 88, 87,
				52, 12, 0, 0, 0, 125, 89, 101, 115, 44, 32, 65, 112, 105, 70, 108, 111,
				119, 32, 111, 102, 102, 101, 114, 115, 32, 97, 32, 49, 52, 45, 100, 97,
				121, 32, 102, 114, 101, 101, 32, 116, 114, 105, 97, 108, 32, 102, 111,
				114, 32, 110, 101, 119, 32, 117, 115, 101, 114, 115, 32, 116, 111, 32,
				116, 101, 115, 116, 32, 116, 104, 101, 32, 112, 108, 97, 116, 102, 111,
				114, 109, 32, 97, 110, 100, 32, 105, 116, 115, 32, 102, 101, 97, 116,
				117, 114, 101, 115, 32, 98, 101, 102, 111, 114, 101, 32, 99, 111, 109,
				109, 105, 116, 116, 105, 110, 103, 32, 116, 111, 32, 97, 32, 112, 97,
				105, 100, 32, 112, 108, 97, 110, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86,
				110, 66, 84, 71, 5, 0, 0, 0, 9, 89, 114, 66, 50, 73, 117, 53, 103, 121,
				0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 113, 101, 82, 83, 68, 105,
				79, 98, 52, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114, 12, 0,
				0, 0, 36, 72, 111, 119, 32, 105, 115, 32, 65, 112, 105, 70, 108, 111,
				119, 39, 115, 32, 112, 114, 105, 99, 105, 110, 103, 32, 115, 116, 114,
				117, 99, 116, 117, 114, 101, 100, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51,
				110, 76, 111, 73, 12, 0, 0, 0, 35, 104, 111, 119, 45, 105, 115, 45, 97,
				112, 105, 102, 108, 111, 119, 45, 115, 45, 112, 114, 105, 99, 105, 110,
				103, 45, 115, 116, 114, 117, 99, 116, 117, 114, 101, 100, 0, 0, 0, 9,
				75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 209, 65, 112, 105,
				70, 108, 111, 119, 39, 115, 32, 112, 114, 105, 99, 105, 110, 103, 32,
				105, 115, 32, 98, 97, 115, 101, 100, 32, 111, 110, 32, 116, 104, 101,
				32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 65, 80, 73, 32, 99,
				97, 108, 108, 115, 32, 97, 110, 100, 32, 102, 101, 97, 116, 117, 114,
				101, 115, 32, 105, 110, 99, 108, 117, 100, 101, 100, 32, 105, 110, 32,
				101, 97, 99, 104, 32, 112, 108, 97, 110, 46, 32, 84, 104, 101, 32, 83,
				116, 97, 114, 116, 101, 114, 32, 112, 108, 97, 110, 32, 104, 97, 115,
				32, 97, 32, 108, 111, 119, 101, 114, 32, 99, 97, 108, 108, 32, 108, 105,
				109, 105, 116, 44, 32, 119, 104, 105, 108, 101, 32, 80, 114, 111, 32,
				97, 110, 100, 32, 69, 110, 116, 101, 114, 112, 114, 105, 115, 101, 32,
				112, 108, 97, 110, 115, 32, 111, 102, 102, 101, 114, 32, 104, 105, 103,
				104, 101, 114, 32, 108, 105, 109, 105, 116, 115, 32, 97, 110, 100, 32,
				109, 111, 114, 101, 32, 97, 100, 118, 97, 110, 99, 101, 100, 32, 102,
				101, 97, 116, 117, 114, 101, 115, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86,
				110, 66, 84, 71, 5, 0, 0, 0, 9, 89, 114, 66, 50, 73, 117, 53, 103, 121,
				0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 101, 53, 115, 118, 108, 77,
				86, 106, 53, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114, 12,
				0, 0, 0, 46, 65, 114, 101, 32, 116, 104, 101, 114, 101, 32, 97, 110,
				121, 32, 104, 105, 100, 100, 101, 110, 32, 102, 101, 101, 115, 32, 111,
				114, 32, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 32, 99, 111,
				115, 116, 115, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73,
				12, 0, 0, 0, 45, 97, 114, 101, 45, 116, 104, 101, 114, 101, 45, 97, 110,
				121, 45, 104, 105, 100, 100, 101, 110, 45, 102, 101, 101, 115, 45, 111,
				114, 45, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 45, 99, 111,
				115, 116, 115, 0, 0, 0, 9, 75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0,
				0, 0, 202, 78, 111, 44, 32, 65, 112, 105, 70, 108, 111, 119, 32, 115,
				116, 114, 105, 118, 101, 115, 32, 102, 111, 114, 32, 116, 114, 97, 110,
				115, 112, 97, 114, 101, 110, 99, 121, 32, 105, 110, 32, 112, 114, 105,
				99, 105, 110, 103, 46, 32, 65, 108, 108, 32, 99, 111, 115, 116, 115, 32,
				97, 114, 101, 32, 99, 108, 101, 97, 114, 108, 121, 32, 111, 117, 116,
				108, 105, 110, 101, 100, 32, 105, 110, 32, 116, 104, 101, 32, 112, 114,
				105, 99, 105, 110, 103, 32, 112, 108, 97, 110, 115, 44, 32, 119, 105,
				116, 104, 32, 110, 111, 32, 104, 105, 100, 100, 101, 110, 32, 102, 101,
				101, 115, 46, 32, 72, 111, 119, 101, 118, 101, 114, 44, 32, 101, 120,
				99, 101, 101, 100, 105, 110, 103, 32, 121, 111, 117, 114, 32, 112, 108,
				97, 110, 39, 115, 32, 65, 80, 73, 32, 99, 97, 108, 108, 32, 108, 105,
				109, 105, 116, 32, 109, 97, 121, 32, 114, 101, 115, 117, 108, 116, 32,
				105, 110, 32, 97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 32, 99,
				104, 97, 114, 103, 101, 115, 46, 0, 0, 0, 9, 121, 90, 80, 68, 86, 110,
				66, 84, 71, 5, 0, 0, 0, 9, 89, 114, 66, 50, 73, 117, 53, 103, 121, 0, 5,
				0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 73, 67, 71, 48, 90, 119, 103, 65,
				90, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117, 98, 120, 114, 12, 0, 0, 0,
				47, 67, 97, 110, 32, 73, 32, 117, 112, 103, 114, 97, 100, 101, 32, 111,
				114, 32, 100, 111, 119, 110, 103, 114, 97, 100, 101, 32, 109, 121, 32,
				112, 108, 97, 110, 32, 97, 116, 32, 97, 110, 121, 32, 116, 105, 109,
				101, 63, 0, 0, 0, 9, 107, 72, 112, 70, 51, 110, 76, 111, 73, 12, 0, 0,
				0, 46, 99, 97, 110, 45, 105, 45, 117, 112, 103, 114, 97, 100, 101, 45,
				111, 114, 45, 100, 111, 119, 110, 103, 114, 97, 100, 101, 45, 109, 121,
				45, 112, 108, 97, 110, 45, 97, 116, 45, 97, 110, 121, 45, 116, 105, 109,
				101, 0, 0, 0, 9, 75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0,
				118, 89, 101, 115, 44, 32, 121, 111, 117, 32, 99, 97, 110, 32, 117, 112,
				103, 114, 97, 100, 101, 32, 111, 114, 32, 100, 111, 119, 110, 103, 114,
				97, 100, 101, 32, 121, 111, 117, 114, 32, 65, 112, 105, 70, 108, 111,
				119, 32, 112, 108, 97, 110, 32, 97, 116, 32, 97, 110, 121, 32, 116, 105,
				109, 101, 46, 32, 67, 104, 97, 110, 103, 101, 115, 32, 119, 105, 108,
				108, 32, 98, 101, 32, 114, 101, 102, 108, 101, 99, 116, 101, 100, 32,
				105, 110, 32, 121, 111, 117, 114, 32, 110, 101, 120, 116, 32, 98, 105,
				108, 108, 105, 110, 103, 32, 99, 121, 99, 108, 101, 46, 0, 0, 0, 9, 121,
				90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 89, 114, 66, 50, 73,
				117, 53, 103, 121, 0, 5, 0, 0, 0, 2, 105, 100, 12, 0, 0, 0, 9, 117, 52,
				98, 109, 105, 79, 110, 119, 89, 0, 0, 0, 9, 111, 55, 83, 103, 103, 117,
				98, 120, 114, 12, 0, 0, 0, 50, 68, 111, 32, 121, 111, 117, 32, 111, 102,
				102, 101, 114, 32, 99, 117, 115, 116, 111, 109, 32, 112, 114, 105, 99,
				105, 110, 103, 32, 102, 111, 114, 32, 104, 105, 103, 104, 45, 118, 111,
				108, 117, 109, 101, 32, 117, 115, 101, 114, 115, 63, 0, 0, 0, 9, 107,
				72, 112, 70, 51, 110, 76, 111, 73, 12, 0, 0, 0, 49, 100, 111, 45, 121,
				111, 117, 45, 111, 102, 102, 101, 114, 45, 99, 117, 115, 116, 111, 109,
				45, 112, 114, 105, 99, 105, 110, 103, 45, 102, 111, 114, 45, 104, 105,
				103, 104, 45, 118, 111, 108, 117, 109, 101, 45, 117, 115, 101, 114, 115,
				0, 0, 0, 9, 75, 54, 115, 73, 115, 113, 88, 87, 52, 12, 0, 0, 0, 153, 89,
				101, 115, 44, 32, 102, 111, 114, 32, 98, 117, 115, 105, 110, 101, 115,
				115, 101, 115, 32, 119, 105, 116, 104, 32, 104, 105, 103, 104, 45, 118,
				111, 108, 117, 109, 101, 32, 110, 101, 101, 100, 115, 32, 111, 114, 32,
				115, 112, 101, 99, 105, 102, 105, 99, 32, 114, 101, 113, 117, 105, 114,
				101, 109, 101, 110, 116, 115, 44, 32, 65, 112, 105, 70, 108, 111, 119,
				32, 111, 102, 102, 101, 114, 115, 32, 99, 117, 115, 116, 111, 109, 32,
				69, 110, 116, 101, 114, 112, 114, 105, 115, 101, 32, 112, 108, 97, 110,
				115, 46, 32, 67, 111, 110, 116, 97, 99, 116, 32, 111, 117, 114, 32, 115,
				97, 108, 101, 115, 32, 116, 101, 97, 109, 32, 102, 111, 114, 32, 97, 32,
				116, 97, 105, 108, 111, 114, 101, 100, 32, 113, 117, 111, 116, 101, 46,
				0, 0, 0, 9, 121, 90, 80, 68, 86, 110, 66, 84, 71, 5, 0, 0, 0, 9, 89,
				114, 66, 50, 73, 117, 53, 103, 121,
			],
			indexes: [],
			resolveRichText,
			schema: n2,
		}),
	},
	displayName: "FAQs",
};
var stdin_default2 = u2;
e3(u2, {
	o7Sggubxr: {
		defaultValue: "",
		title: "Question",
		type: t7.String,
	},
	kHpF3nLoI: {
		title: "Slug",
		type: t7.String,
	},
	K6sIsqXW4: {
		defaultValue: "",
		title: "Answer",
		type: t7.String,
	},
	yZPDVnBTG: {
		defaultValue: "XsNXAvkMi",
		options: ["XsNXAvkMi", "YrB2Iu5gy", "sGRLO0HWE", "yAAGDyE3Q"],
		optionTitles: ["General", "Pricing", "Sales", "Support"],
		title: "Category",
		type: t7.Enum,
	},
});

// /:https://framerusercontent.com/modules/6GKhy2l5gakg4Kc5NkIr/xPPEqrAYsZYr3CN7uBu0/tOUeA1GYC.js
var CardsFAQCardFonts = getFonts(stdin_default);
var cycleOrder = ["ZQ8oV6EzC", "u4G7Oc5d1", "IURjCWqK1", "W7eBOvVqA"];
var serializationHash = "framer-teOMj";
var variantClassNames = {
	IURjCWqK1: "framer-v-a7wjjj",
	u4G7Oc5d1: "framer-v-1xbvxtm",
	W7eBOvVqA: "framer-v-1cyxvex",
	ZQ8oV6EzC: "framer-v-13mvb3q",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var QueryData = ({ query, children }) => {
	const data = useQueryData(query);
	return children(data);
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion(React.Fragment);
var humanReadableVariantMap = {
	Homepage: "ZQ8oV6EzC",
	Pricing: "u4G7Oc5d1",
	Sales: "IURjCWqK1",
	Support: "W7eBOvVqA",
};
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "ZQ8oV6EzC",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const {
		style,
		className,
		layoutId,
		variant,
		o7SggubxrJyVDIVuF4,
		K6sIsqXW4JyVDIVuF4,
		idJyVDIVuF4,
		kHpF3nLoIJyVDIVuF4,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		gestureHandlers,
		gestureVariant,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "ZQ8oV6EzC",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							serializationHash,
							...sharedStyleClassNames,
							"framer-13mvb3q",
							className,
							classNames,
						)}
						data-framer-name={"Homepage"}
						layoutDependency={layoutDependency}
						layoutId={"ZQ8oV6EzC"}
						ref={ref ?? ref1}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								IURjCWqK1: {
									"data-framer-name": "Sales",
								},
								u4G7Oc5d1: {
									"data-framer-name": "Pricing",
								},
								W7eBOvVqA: {
									"data-framer-name": "Support",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion.div
							className={"framer-xs1ywm"}
							layoutDependency={layoutDependency}
							layoutId={"JyVDIVuF4"}
						>
							<QueryData
								query={{
									from: {
										data: stdin_default2,
										type: "Collection",
									},
									orderBy: [
										{
											direction: "desc",
											name: "index",
											type: "Identifier",
										},
									],
									select: [
										{
											name: "o7Sggubxr",
											type: "Identifier",
										},
										{
											name: "K6sIsqXW4",
											type: "Identifier",
										},
										{
											name: "id",
											type: "Identifier",
										},
										{
											name: "kHpF3nLoI",
											type: "Identifier",
										},
									],
									where: {
										left: {
											name: "yZPDVnBTG",
											type: "Identifier",
										},
										operator: "==",
										right: {
											type: "LiteralValue",
											value: "XsNXAvkMi",
										},
										type: "BinaryOperation",
									},
								}}
								{...addPropertyOverrides(
									{
										IURjCWqK1: {
											query: {
												from: {
													data: stdin_default2,
													type: "Collection",
												},
												orderBy: [
													{
														direction: "desc",
														name: "index",
														type: "Identifier",
													},
												],
												select: [
													{
														name: "o7Sggubxr",
														type: "Identifier",
													},
													{
														name: "K6sIsqXW4",
														type: "Identifier",
													},
													{
														name: "id",
														type: "Identifier",
													},
													{
														name: "kHpF3nLoI",
														type: "Identifier",
													},
												],
												where: {
													left: {
														name: "yZPDVnBTG",
														type: "Identifier",
													},
													operator: "==",
													right: {
														type: "LiteralValue",
														value: "sGRLO0HWE",
													},
													type: "BinaryOperation",
												},
											},
										},
										u4G7Oc5d1: {
											query: {
												from: {
													data: stdin_default2,
													type: "Collection",
												},
												orderBy: [
													{
														direction: "desc",
														name: "index",
														type: "Identifier",
													},
												],
												select: [
													{
														name: "o7Sggubxr",
														type: "Identifier",
													},
													{
														name: "K6sIsqXW4",
														type: "Identifier",
													},
													{
														name: "id",
														type: "Identifier",
													},
													{
														name: "kHpF3nLoI",
														type: "Identifier",
													},
												],
												where: {
													left: {
														name: "yZPDVnBTG",
														type: "Identifier",
													},
													operator: "==",
													right: {
														type: "LiteralValue",
														value: "YrB2Iu5gy",
													},
													type: "BinaryOperation",
												},
											},
										},
										W7eBOvVqA: {
											query: {
												from: {
													data: stdin_default2,
													type: "Collection",
												},
												orderBy: [
													{
														direction: "desc",
														name: "index",
														type: "Identifier",
													},
												],
												select: [
													{
														name: "o7Sggubxr",
														type: "Identifier",
													},
													{
														name: "K6sIsqXW4",
														type: "Identifier",
													},
													{
														name: "id",
														type: "Identifier",
													},
													{
														name: "kHpF3nLoI",
														type: "Identifier",
													},
												],
												where: {
													left: {
														name: "yZPDVnBTG",
														type: "Identifier",
													},
													operator: "==",
													right: {
														type: "LiteralValue",
														value: "yAAGDyE3Q",
													},
													type: "BinaryOperation",
												},
											},
										},
									},
									baseVariant,
									gestureVariant,
								)}
							>
								{(collection, paginationInfo, loadMore) => (
									<_Fragment>
										{collection.map(
											(
												{
													o7Sggubxr: o7SggubxrJyVDIVuF42,
													K6sIsqXW4: K6sIsqXW4JyVDIVuF42,
													id: idJyVDIVuF42,
													kHpF3nLoI: kHpF3nLoIJyVDIVuF42,
												},
												i2,
											) => {
												return (
													<LayoutGroup id={`JyVDIVuF4-${idJyVDIVuF42}`}>
														<PathVariablesContext.Provider
															value={{
																kHpF3nLoI: kHpF3nLoIJyVDIVuF42,
															}}
														>
															<ComponentViewportProvider
																width={`max(${componentViewport?.width || "100vw"}, 1px)`}
															>
																<motion.div
																	className={"framer-oiu6r7-container"}
																	layoutDependency={layoutDependency}
																	layoutId={"jPDiID7fc-container"}
																>
																	{_jsx(stdin_default, {
																		height: "100%",
																		id: "jPDiID7fc",
																		layoutId: "jPDiID7fc",
																		style: {
																			width: "100%",
																		},
																		variant: "Gb01L_14E",
																		W4S_nsMzp: o7SggubxrJyVDIVuF42,
																		width: "100%",
																		YyuQfUuG8: K6sIsqXW4JyVDIVuF42,
																	})}
																</motion.div>
															</ComponentViewportProvider>
														</PathVariablesContext.Provider>
													</LayoutGroup>
												);
											},
										)}
									</_Fragment>
								)}
							</QueryData>
						</motion.div>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-teOMj.framer-11c9cd0, .framer-teOMj .framer-11c9cd0 { display: block; }",
	".framer-teOMj.framer-13mvb3q { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 32px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 600px; }",
	".framer-teOMj .framer-xs1ywm { align-content: center; align-items: center; display: flex; flex: 1 0 0px; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: flex-start; padding: 0px; position: relative; width: 1px; }",
	".framer-teOMj .framer-oiu6r7-container { flex: none; height: auto; position: relative; width: 100%; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-teOMj.framer-13mvb3q, .framer-teOMj .framer-xs1ywm { gap: 0px; } .framer-teOMj.framer-13mvb3q > * { margin: 0px; margin-left: calc(32px / 2); margin-right: calc(32px / 2); } .framer-teOMj.framer-13mvb3q > :first-child { margin-left: 0px; } .framer-teOMj.framer-13mvb3q > :last-child { margin-right: 0px; } .framer-teOMj .framer-xs1ywm > * { margin: 0px; margin-bottom: calc(0px / 2); margin-top: calc(0px / 2); } .framer-teOMj .framer-xs1ywm > :first-child { margin-top: 0px; } .framer-teOMj .framer-xs1ywm > :last-child { margin-bottom: 0px; } }",
];
var FramertOUeA1GYC = withCSS(Component, css, "framer-teOMj");
var stdin_default3 = FramertOUeA1GYC;
FramertOUeA1GYC.displayName = "Interactive/FAQs";
FramertOUeA1GYC.defaultProps = {
	height: 432,
	width: 600,
};
addPropertyControls(FramertOUeA1GYC, {
	variant: {
		options: ["ZQ8oV6EzC", "u4G7Oc5d1", "IURjCWqK1", "W7eBOvVqA"],
		optionTitles: ["Homepage", "Pricing", "Sales", "Support"],
		title: "Variant",
		type: ControlType.Enum,
	},
});
addFonts(
	FramertOUeA1GYC,
	[
		{
			explicitInter: true,
			fonts: [],
		},
		...CardsFAQCardFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:interactive/fa-qs
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "IURjCWqK1",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"f667fc580d8d9346cf49d633d75940b95292fa43c24dd7765c9a175ec73f7405"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default3, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders FaQsFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"f667fc580d8d9346cf49d633d75940b95292fa43c24dd7765c9a175ec73f7405"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default3}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default3);
var fa_qs_default = ComponentWithRoot;
export { fa_qs_default as default };
/*! Bundled license information:

splaytree/dist/splay.js:
  (**
   * splaytree v3.1.2
   * Fast Splay tree for Node and browser
   *
   * @author Alexander Milevski <info@w8r.name>
   * @license MIT
   * @preserve
   *)
  (*! *****************************************************************************
      Copyright (c) Microsoft Corporation. All rights reserved.
      Licensed under the Apache License, Version 2.0 (the "License"); you may not use
      this file except in compliance with the License. You may obtain a copy of the
      License at http://www.apache.org/licenses/LICENSE-2.0
  
      THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
      WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
      MERCHANTABLITY OR NON-INFRINGEMENT.
  
      See the Apache Version 2.0 License for specific language governing permissions
      and limitations under the License.
      ***************************************************************************** *)
*/
