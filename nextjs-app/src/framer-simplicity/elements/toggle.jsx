// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 080b0b6d577bdc21 "Unframer Simplicity demo", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Off' | 'On' // Variant
 * tap?: Function // Tap
}} Props

 */
import { routes } from "../chunks/chunk-HEB6EHGG.js";

// virtual:elements/toggle
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/rRLtr1jcDDawz68R6IzA/KNIt9HYSr2Hyn8FHhabg/Q83sdnvwI.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	useActiveVariantCallback,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var cycleOrder = ["MUHSSXcAr", "ypdQy6tQR"];
var serializationHash = "framer-p1917";
var variantClassNames = {
	MUHSSXcAr: "framer-v-uhtirf",
	ypdQy6tQR: "framer-v-12hvvpp",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants === null || variants === void 0
		? void 0
		: variants.forEach(
				(variant) =>
					variant && Object.assign(nextOverrides, overrides[variant]),
			);
	return nextOverrides;
}
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 320,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition =
		value !== null && value !== void 0 ? value : config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	Off: "MUHSSXcAr",
	On: "ypdQy6tQR",
};
var getProps = ({ height, id, tap, width, ...props }) => {
	var _humanReadableVariantMap_props_variant, _ref;
	return {
		...props,
		variant:
			(_ref =
				(_humanReadableVariantMap_props_variant =
					humanReadableVariantMap[props.variant]) !== null &&
				_humanReadableVariantMap_props_variant !== void 0
					? _humanReadableVariantMap_props_variant
					: props.variant) !== null && _ref !== void 0
				? _ref
				: "MUHSSXcAr",
		zr55eR7Qu: tap !== null && tap !== void 0 ? tap : props.zr55eR7Qu,
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const { style, className, layoutId, variant, zr55eR7Qu, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "MUHSSXcAr",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onTapxbxjq4 = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (zr55eR7Qu) {
			const res = await zr55eR7Qu(...args);
			if (res === false) return false;
		}
		setVariant("ypdQy6tQR");
	});
	const onTap1vpy0vn = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (zr55eR7Qu) {
			const res = await zr55eR7Qu(...args);
			if (res === false) return false;
		}
		setVariant("MUHSSXcAr");
	});
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const sharedStyleClassNames = [];
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup
			id={layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId}
		>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							serializationHash,
							...sharedStyleClassNames,
							"framer-uhtirf",
							className,
							classNames,
						)}
						data-framer-name={"Off"}
						data-highlight={true}
						layoutDependency={layoutDependency}
						layoutId={"MUHSSXcAr"}
						onTap={onTapxbxjq4}
						ref={ref !== null && ref !== void 0 ? ref : ref1}
						style={{
							backgroundColor:
								"var(--token-cddd8839-50cd-4074-8da8-8850d0d377b4, rgba(255, 255, 255, 0.1))",
							borderBottomLeftRadius: 999,
							borderBottomRightRadius: 999,
							borderTopLeftRadius: 999,
							borderTopRightRadius: 999,
							...style,
						}}
						variants={{
							ypdQy6tQR: {
								backgroundColor:
									"var(--token-e3c51256-0961-4b79-ba15-cc3f17394ba4, rgb(81, 47, 235))",
							},
						}}
						{...addPropertyOverrides(
							{
								ypdQy6tQR: {
									"data-framer-name": "On",
									onTap: onTap1vpy0vn,
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion.div
							className={"framer-1mbmgkx"}
							layoutDependency={layoutDependency}
							layoutId={"Dew4NPft7"}
							style={{
								background:
									"linear-gradient(180deg, rgb(242, 242, 242) 0%, rgb(232, 232, 232) 100%)",
								borderBottomLeftRadius: 999,
								borderBottomRightRadius: 999,
								borderTopLeftRadius: 999,
								borderTopRightRadius: 999,
							}}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-p1917.framer-1agkosw, .framer-p1917 .framer-1agkosw { display: block; }",
	".framer-p1917.framer-uhtirf { cursor: pointer; height: 28px; overflow: hidden; position: relative; width: 60px; will-change: var(--framer-will-change-override, transform); }",
	".framer-p1917 .framer-1mbmgkx { flex: none; height: 20px; left: 4px; overflow: hidden; position: absolute; top: calc(50.00000000000002% - 20px / 2); width: 20px; will-change: var(--framer-will-change-override, transform); }",
	".framer-p1917.framer-v-12hvvpp .framer-1mbmgkx { left: unset; right: 4px; }",
];
var FramerQ83sdnvwI = withCSS(Component, css, "framer-p1917");
var stdin_default = FramerQ83sdnvwI;
FramerQ83sdnvwI.displayName = "Elements/Toggle";
FramerQ83sdnvwI.defaultProps = {
	height: 28,
	width: 60,
};
addPropertyControls(FramerQ83sdnvwI, {
	variant: {
		options: ["MUHSSXcAr", "ypdQy6tQR"],
		optionTitles: ["Off", "On"],
		title: "Variant",
		type: ControlType.Enum,
	},
	zr55eR7Qu: {
		title: "Tap",
		type: ControlType.EventHandler,
	},
});
addFonts(
	FramerQ83sdnvwI,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:elements/toggle
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"080b0b6d577bdc210bd0cd32f7edde6108e985399928f17be1208fac1508931c"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders ToggleFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"080b0b6d577bdc210bd0cd32f7edde6108e985399928f17be1208fac1508931c"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var toggle_default = ComponentWithRoot;
export { toggle_default as default };
