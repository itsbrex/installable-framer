// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 080b0b6d577bdc21 "Unframer Simplicity demo", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
 * variant?: 'Desktop' | 'Tablet' | 'Phone' // Variant
}} Props

 */
import { stdin_default } from "./chunks/chunk-B3MU4H4H.js";
import "./chunks/chunk-BPH5BCDR.js";
import "./chunks/chunk-KEXPIFJ3.js";
import "./chunks/chunk-PSINJK7R.js";
import "./chunks/chunk-ZKAXZ4P5.js";
import { routes } from "./chunks/chunk-HEB6EHGG.js";

// virtual:section-features
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framerusercontent.com/modules/jVQGemd6yn35sShs6D7P/6jjz3o55NRIi9IakXuaA/SpenI5W7L.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ComponentViewportProvider,
	ControlType,
	cx,
	getFonts,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var SectionsFeaturesContainerFonts = getFonts(stdin_default);
var cycleOrder = ["sHnGLtvML", "IOIaixBce", "Z9XgSJQcP"];
var serializationHash = "framer-wG0Xq";
var variantClassNames = {
	IOIaixBce: "framer-v-kkud9i",
	sHnGLtvML: "framer-v-eur1he",
	Z9XgSJQcP: "framer-v-1nh8kne",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var humanReadableVariantMap = {
	Desktop: "sHnGLtvML",
	Phone: "Z9XgSJQcP",
	Tablet: "IOIaixBce",
};
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "sHnGLtvML",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Variants = motion.create(React.Fragment);
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const { activeLocale, setLocale } = useLocaleInfo();
	const { style, className, layoutId, variant, ...restProps } = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "sHnGLtvML",
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	const ref1 = React.useRef(null);
	const defaultLayoutId = React.useId();
	const componentViewport = useComponentViewport();
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-eur1he",
							className,
							classNames,
						)}
						data-framer-name={"Desktop"}
						layoutDependency={layoutDependency}
						layoutId={"sHnGLtvML"}
						ref={ref ?? ref1}
						style={{
							backgroundColor:
								"var(--token-f4cf9e3e-da35-4e33-897c-29a30a250c5f, rgb(0, 0, 0))",
							...style,
						}}
						{...addPropertyOverrides(
							{
								IOIaixBce: {
									"data-framer-name": "Tablet",
								},
								Z9XgSJQcP: {
									"data-framer-name": "Phone",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<ComponentViewportProvider
							height={452}
							width={`min(${componentViewport?.width || "100vw"} - 160px, 1072px)`}
							y={
								(componentViewport?.y || 0) +
								80 +
								(((componentViewport?.height || 612) - 160 - 452) / 2 + 0 + 0)
							}
							{...addPropertyOverrides(
								{
									IOIaixBce: {
										width: `min(${componentViewport?.width || "100vw"} - 64px, 1072px)`,
										y:
											(componentViewport?.y || 0) +
											80 +
											(((componentViewport?.height || 1056) - 160 - 452) / 2 +
												0 +
												0),
									},
									Z9XgSJQcP: {
										width: `min(${componentViewport?.width || "100vw"} - 48px, 1072px)`,
										y:
											(componentViewport?.y || 0) +
											80 +
											(((componentViewport?.height || 1176) - 160 - 452) / 2 +
												0 +
												0),
									},
								},
								baseVariant,
								gestureVariant,
							)}
						>
							<motion.div
								className={"framer-1soqwu2-container"}
								layoutDependency={layoutDependency}
								layoutId={"gA4Fs8gk4-container"}
							>
								{_jsx(stdin_default, {
									height: "100%",
									id: "gA4Fs8gk4",
									layoutId: "gA4Fs8gk4",
									style: {
										maxWidth: "100%",
										width: "100%",
									},
									variant: "G9YxcgYmG",
									width: "100%",
									...addPropertyOverrides(
										{
											IOIaixBce: {
												variant: "SZ4WQIvQT",
											},
											Z9XgSJQcP: {
												variant: "SZ4WQIvQT",
											},
										},
										baseVariant,
										gestureVariant,
									),
								})}
							</motion.div>
						</ComponentViewportProvider>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-wG0Xq.framer-bz9ere, .framer-wG0Xq .framer-bz9ere { display: block; }",
	".framer-wG0Xq.framer-eur1he { align-content: center; align-items: center; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 64px; height: min-content; justify-content: center; overflow: hidden; padding: 80px; position: relative; width: 1200px; }",
	".framer-wG0Xq .framer-1soqwu2-container { flex: none; height: auto; max-width: 1072px; position: relative; width: 100%; }",
	"@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-wG0Xq.framer-eur1he { gap: 0px; } .framer-wG0Xq.framer-eur1he > * { margin: 0px; margin-bottom: calc(64px / 2); margin-top: calc(64px / 2); } .framer-wG0Xq.framer-eur1he > :first-child { margin-top: 0px; } .framer-wG0Xq.framer-eur1he > :last-child { margin-bottom: 0px; } }",
	".framer-wG0Xq.framer-v-kkud9i.framer-eur1he { padding: 80px 32px 80px 32px; width: 810px; }",
	".framer-wG0Xq.framer-v-1nh8kne.framer-eur1he { padding: 80px 24px 80px 24px; width: 390px; }",
];
var FramerSpenI5W7L = withCSS(Component, css, "framer-wG0Xq");
var stdin_default2 = FramerSpenI5W7L;
FramerSpenI5W7L.displayName = "Section Features";
FramerSpenI5W7L.defaultProps = {
	height: 612,
	width: 1200,
};
addPropertyControls(FramerSpenI5W7L, {
	variant: {
		options: ["sHnGLtvML", "IOIaixBce", "Z9XgSJQcP"],
		optionTitles: ["Desktop", "Tablet", "Phone"],
		title: "Variant",
		type: ControlType.Enum,
	},
});
addFonts(
	FramerSpenI5W7L,
	[
		{
			explicitInter: true,
			fonts: [],
		},
		...SectionsFeaturesContainerFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:section-features
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "Z9XgSJQcP",
	md: "IOIaixBce",
	xl: "sHnGLtvML",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"080b0b6d577bdc210bd0cd32f7edde6108e985399928f17be1208fac1508931c"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default2, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders SectionFeaturesFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"080b0b6d577bdc210bd0cd32f7edde6108e985399928f17be1208fac1508931c"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default2}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default2);
var section_features_default = ComponentWithRoot;
export { section_features_default as default };
